// source: penumbra/core/asset/v1alpha1/asset.proto
/**
 * @fileoverview
 * @enhanceable
 * @suppress {missingRequire} reports error on implicit type usages.
 * @suppress {messageConventions} JS Compiler reports an error if a variable or
 *     field starts with 'MSG_' and isn't a translatable message.
 * @public
 */
// GENERATED CODE -- DO NOT EDIT!
/* eslint-disable */
// @ts-nocheck

var jspb = require('google-protobuf');
var goog = jspb;
var global = (function() {
  if (this) { return this; }
  if (typeof window !== 'undefined') { return window; }
  if (typeof global !== 'undefined') { return global; }
  if (typeof self !== 'undefined') { return self; }
  return Function('return this')();
}.call(null));

var penumbra_core_num_v1alpha1_num_pb = require('../../../../penumbra/core/num/v1alpha1/num_pb.js');
goog.object.extend(proto, penumbra_core_num_v1alpha1_num_pb);
goog.exportSymbol('proto.penumbra.core.asset.v1alpha1.AssetId', null, global);
goog.exportSymbol('proto.penumbra.core.asset.v1alpha1.BalanceCommitment', null, global);
goog.exportSymbol('proto.penumbra.core.asset.v1alpha1.Denom', null, global);
goog.exportSymbol('proto.penumbra.core.asset.v1alpha1.DenomMetadata', null, global);
goog.exportSymbol('proto.penumbra.core.asset.v1alpha1.DenomUnit', null, global);
goog.exportSymbol('proto.penumbra.core.asset.v1alpha1.Value', null, global);
goog.exportSymbol('proto.penumbra.core.asset.v1alpha1.ValueView', null, global);
goog.exportSymbol('proto.penumbra.core.asset.v1alpha1.ValueView.KnownDenom', null, global);
goog.exportSymbol('proto.penumbra.core.asset.v1alpha1.ValueView.UnknownDenom', null, global);
goog.exportSymbol('proto.penumbra.core.asset.v1alpha1.ValueView.ValueViewCase', null, global);
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.penumbra.core.asset.v1alpha1.BalanceCommitment = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.penumbra.core.asset.v1alpha1.BalanceCommitment, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.penumbra.core.asset.v1alpha1.BalanceCommitment.displayName = 'proto.penumbra.core.asset.v1alpha1.BalanceCommitment';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.penumbra.core.asset.v1alpha1.AssetId = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.penumbra.core.asset.v1alpha1.AssetId, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.penumbra.core.asset.v1alpha1.AssetId.displayName = 'proto.penumbra.core.asset.v1alpha1.AssetId';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.penumbra.core.asset.v1alpha1.Denom = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.penumbra.core.asset.v1alpha1.Denom, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.penumbra.core.asset.v1alpha1.Denom.displayName = 'proto.penumbra.core.asset.v1alpha1.Denom';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.penumbra.core.asset.v1alpha1.DenomMetadata = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, 500, proto.penumbra.core.asset.v1alpha1.DenomMetadata.repeatedFields_, null);
};
goog.inherits(proto.penumbra.core.asset.v1alpha1.DenomMetadata, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.penumbra.core.asset.v1alpha1.DenomMetadata.displayName = 'proto.penumbra.core.asset.v1alpha1.DenomMetadata';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.penumbra.core.asset.v1alpha1.DenomUnit = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, proto.penumbra.core.asset.v1alpha1.DenomUnit.repeatedFields_, null);
};
goog.inherits(proto.penumbra.core.asset.v1alpha1.DenomUnit, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.penumbra.core.asset.v1alpha1.DenomUnit.displayName = 'proto.penumbra.core.asset.v1alpha1.DenomUnit';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.penumbra.core.asset.v1alpha1.Value = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.penumbra.core.asset.v1alpha1.Value, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.penumbra.core.asset.v1alpha1.Value.displayName = 'proto.penumbra.core.asset.v1alpha1.Value';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.penumbra.core.asset.v1alpha1.ValueView = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, proto.penumbra.core.asset.v1alpha1.ValueView.oneofGroups_);
};
goog.inherits(proto.penumbra.core.asset.v1alpha1.ValueView, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.penumbra.core.asset.v1alpha1.ValueView.displayName = 'proto.penumbra.core.asset.v1alpha1.ValueView';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.penumbra.core.asset.v1alpha1.ValueView.KnownDenom = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.penumbra.core.asset.v1alpha1.ValueView.KnownDenom, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.penumbra.core.asset.v1alpha1.ValueView.KnownDenom.displayName = 'proto.penumbra.core.asset.v1alpha1.ValueView.KnownDenom';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.penumbra.core.asset.v1alpha1.ValueView.UnknownDenom = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.penumbra.core.asset.v1alpha1.ValueView.UnknownDenom, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.penumbra.core.asset.v1alpha1.ValueView.UnknownDenom.displayName = 'proto.penumbra.core.asset.v1alpha1.ValueView.UnknownDenom';
}



if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.penumbra.core.asset.v1alpha1.BalanceCommitment.prototype.toObject = function(opt_includeInstance) {
  return proto.penumbra.core.asset.v1alpha1.BalanceCommitment.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.penumbra.core.asset.v1alpha1.BalanceCommitment} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.penumbra.core.asset.v1alpha1.BalanceCommitment.toObject = function(includeInstance, msg) {
  var f, obj = {
    inner: msg.getInner_asB64()
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.penumbra.core.asset.v1alpha1.BalanceCommitment}
 */
proto.penumbra.core.asset.v1alpha1.BalanceCommitment.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.penumbra.core.asset.v1alpha1.BalanceCommitment;
  return proto.penumbra.core.asset.v1alpha1.BalanceCommitment.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.penumbra.core.asset.v1alpha1.BalanceCommitment} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.penumbra.core.asset.v1alpha1.BalanceCommitment}
 */
proto.penumbra.core.asset.v1alpha1.BalanceCommitment.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {!Uint8Array} */ (reader.readBytes());
      msg.setInner(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.penumbra.core.asset.v1alpha1.BalanceCommitment.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.penumbra.core.asset.v1alpha1.BalanceCommitment.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.penumbra.core.asset.v1alpha1.BalanceCommitment} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.penumbra.core.asset.v1alpha1.BalanceCommitment.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getInner_asU8();
  if (f.length > 0) {
    writer.writeBytes(
      1,
      f
    );
  }
};


/**
 * optional bytes inner = 1;
 * @return {!(string|Uint8Array)}
 */
proto.penumbra.core.asset.v1alpha1.BalanceCommitment.prototype.getInner = function() {
  return /** @type {!(string|Uint8Array)} */ (jspb.Message.getFieldWithDefault(this, 1, ""));
};


/**
 * optional bytes inner = 1;
 * This is a type-conversion wrapper around `getInner()`
 * @return {string}
 */
proto.penumbra.core.asset.v1alpha1.BalanceCommitment.prototype.getInner_asB64 = function() {
  return /** @type {string} */ (jspb.Message.bytesAsB64(
      this.getInner()));
};


/**
 * optional bytes inner = 1;
 * Note that Uint8Array is not supported on all browsers.
 * @see http://caniuse.com/Uint8Array
 * This is a type-conversion wrapper around `getInner()`
 * @return {!Uint8Array}
 */
proto.penumbra.core.asset.v1alpha1.BalanceCommitment.prototype.getInner_asU8 = function() {
  return /** @type {!Uint8Array} */ (jspb.Message.bytesAsU8(
      this.getInner()));
};


/**
 * @param {!(string|Uint8Array)} value
 * @return {!proto.penumbra.core.asset.v1alpha1.BalanceCommitment} returns this
 */
proto.penumbra.core.asset.v1alpha1.BalanceCommitment.prototype.setInner = function(value) {
  return jspb.Message.setProto3BytesField(this, 1, value);
};





if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.penumbra.core.asset.v1alpha1.AssetId.prototype.toObject = function(opt_includeInstance) {
  return proto.penumbra.core.asset.v1alpha1.AssetId.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.penumbra.core.asset.v1alpha1.AssetId} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.penumbra.core.asset.v1alpha1.AssetId.toObject = function(includeInstance, msg) {
  var f, obj = {
    inner: msg.getInner_asB64(),
    altBech32m: jspb.Message.getFieldWithDefault(msg, 2, ""),
    altBaseDenom: jspb.Message.getFieldWithDefault(msg, 3, "")
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.penumbra.core.asset.v1alpha1.AssetId}
 */
proto.penumbra.core.asset.v1alpha1.AssetId.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.penumbra.core.asset.v1alpha1.AssetId;
  return proto.penumbra.core.asset.v1alpha1.AssetId.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.penumbra.core.asset.v1alpha1.AssetId} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.penumbra.core.asset.v1alpha1.AssetId}
 */
proto.penumbra.core.asset.v1alpha1.AssetId.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {!Uint8Array} */ (reader.readBytes());
      msg.setInner(value);
      break;
    case 2:
      var value = /** @type {string} */ (reader.readString());
      msg.setAltBech32m(value);
      break;
    case 3:
      var value = /** @type {string} */ (reader.readString());
      msg.setAltBaseDenom(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.penumbra.core.asset.v1alpha1.AssetId.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.penumbra.core.asset.v1alpha1.AssetId.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.penumbra.core.asset.v1alpha1.AssetId} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.penumbra.core.asset.v1alpha1.AssetId.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getInner_asU8();
  if (f.length > 0) {
    writer.writeBytes(
      1,
      f
    );
  }
  f = message.getAltBech32m();
  if (f.length > 0) {
    writer.writeString(
      2,
      f
    );
  }
  f = message.getAltBaseDenom();
  if (f.length > 0) {
    writer.writeString(
      3,
      f
    );
  }
};


/**
 * optional bytes inner = 1;
 * @return {!(string|Uint8Array)}
 */
proto.penumbra.core.asset.v1alpha1.AssetId.prototype.getInner = function() {
  return /** @type {!(string|Uint8Array)} */ (jspb.Message.getFieldWithDefault(this, 1, ""));
};


/**
 * optional bytes inner = 1;
 * This is a type-conversion wrapper around `getInner()`
 * @return {string}
 */
proto.penumbra.core.asset.v1alpha1.AssetId.prototype.getInner_asB64 = function() {
  return /** @type {string} */ (jspb.Message.bytesAsB64(
      this.getInner()));
};


/**
 * optional bytes inner = 1;
 * Note that Uint8Array is not supported on all browsers.
 * @see http://caniuse.com/Uint8Array
 * This is a type-conversion wrapper around `getInner()`
 * @return {!Uint8Array}
 */
proto.penumbra.core.asset.v1alpha1.AssetId.prototype.getInner_asU8 = function() {
  return /** @type {!Uint8Array} */ (jspb.Message.bytesAsU8(
      this.getInner()));
};


/**
 * @param {!(string|Uint8Array)} value
 * @return {!proto.penumbra.core.asset.v1alpha1.AssetId} returns this
 */
proto.penumbra.core.asset.v1alpha1.AssetId.prototype.setInner = function(value) {
  return jspb.Message.setProto3BytesField(this, 1, value);
};


/**
 * optional string alt_bech32m = 2;
 * @return {string}
 */
proto.penumbra.core.asset.v1alpha1.AssetId.prototype.getAltBech32m = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 2, ""));
};


/**
 * @param {string} value
 * @return {!proto.penumbra.core.asset.v1alpha1.AssetId} returns this
 */
proto.penumbra.core.asset.v1alpha1.AssetId.prototype.setAltBech32m = function(value) {
  return jspb.Message.setProto3StringField(this, 2, value);
};


/**
 * optional string alt_base_denom = 3;
 * @return {string}
 */
proto.penumbra.core.asset.v1alpha1.AssetId.prototype.getAltBaseDenom = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 3, ""));
};


/**
 * @param {string} value
 * @return {!proto.penumbra.core.asset.v1alpha1.AssetId} returns this
 */
proto.penumbra.core.asset.v1alpha1.AssetId.prototype.setAltBaseDenom = function(value) {
  return jspb.Message.setProto3StringField(this, 3, value);
};





if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.penumbra.core.asset.v1alpha1.Denom.prototype.toObject = function(opt_includeInstance) {
  return proto.penumbra.core.asset.v1alpha1.Denom.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.penumbra.core.asset.v1alpha1.Denom} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.penumbra.core.asset.v1alpha1.Denom.toObject = function(includeInstance, msg) {
  var f, obj = {
    denom: jspb.Message.getFieldWithDefault(msg, 1, "")
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.penumbra.core.asset.v1alpha1.Denom}
 */
proto.penumbra.core.asset.v1alpha1.Denom.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.penumbra.core.asset.v1alpha1.Denom;
  return proto.penumbra.core.asset.v1alpha1.Denom.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.penumbra.core.asset.v1alpha1.Denom} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.penumbra.core.asset.v1alpha1.Denom}
 */
proto.penumbra.core.asset.v1alpha1.Denom.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {string} */ (reader.readString());
      msg.setDenom(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.penumbra.core.asset.v1alpha1.Denom.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.penumbra.core.asset.v1alpha1.Denom.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.penumbra.core.asset.v1alpha1.Denom} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.penumbra.core.asset.v1alpha1.Denom.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getDenom();
  if (f.length > 0) {
    writer.writeString(
      1,
      f
    );
  }
};


/**
 * optional string denom = 1;
 * @return {string}
 */
proto.penumbra.core.asset.v1alpha1.Denom.prototype.getDenom = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 1, ""));
};


/**
 * @param {string} value
 * @return {!proto.penumbra.core.asset.v1alpha1.Denom} returns this
 */
proto.penumbra.core.asset.v1alpha1.Denom.prototype.setDenom = function(value) {
  return jspb.Message.setProto3StringField(this, 1, value);
};



/**
 * List of repeated fields within this message type.
 * @private {!Array<number>}
 * @const
 */
proto.penumbra.core.asset.v1alpha1.DenomMetadata.repeatedFields_ = [2];



if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.penumbra.core.asset.v1alpha1.DenomMetadata.prototype.toObject = function(opt_includeInstance) {
  return proto.penumbra.core.asset.v1alpha1.DenomMetadata.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.penumbra.core.asset.v1alpha1.DenomMetadata} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.penumbra.core.asset.v1alpha1.DenomMetadata.toObject = function(includeInstance, msg) {
  var f, obj = {
    description: jspb.Message.getFieldWithDefault(msg, 1, ""),
    denomUnitsList: jspb.Message.toObjectList(msg.getDenomUnitsList(),
    proto.penumbra.core.asset.v1alpha1.DenomUnit.toObject, includeInstance),
    base: jspb.Message.getFieldWithDefault(msg, 3, ""),
    display: jspb.Message.getFieldWithDefault(msg, 4, ""),
    name: jspb.Message.getFieldWithDefault(msg, 5, ""),
    symbol: jspb.Message.getFieldWithDefault(msg, 6, ""),
    uri: jspb.Message.getFieldWithDefault(msg, 7, ""),
    uriHash: jspb.Message.getFieldWithDefault(msg, 8, ""),
    penumbraAssetId: (f = msg.getPenumbraAssetId()) && proto.penumbra.core.asset.v1alpha1.AssetId.toObject(includeInstance, f)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.penumbra.core.asset.v1alpha1.DenomMetadata}
 */
proto.penumbra.core.asset.v1alpha1.DenomMetadata.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.penumbra.core.asset.v1alpha1.DenomMetadata;
  return proto.penumbra.core.asset.v1alpha1.DenomMetadata.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.penumbra.core.asset.v1alpha1.DenomMetadata} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.penumbra.core.asset.v1alpha1.DenomMetadata}
 */
proto.penumbra.core.asset.v1alpha1.DenomMetadata.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {string} */ (reader.readString());
      msg.setDescription(value);
      break;
    case 2:
      var value = new proto.penumbra.core.asset.v1alpha1.DenomUnit;
      reader.readMessage(value,proto.penumbra.core.asset.v1alpha1.DenomUnit.deserializeBinaryFromReader);
      msg.addDenomUnits(value);
      break;
    case 3:
      var value = /** @type {string} */ (reader.readString());
      msg.setBase(value);
      break;
    case 4:
      var value = /** @type {string} */ (reader.readString());
      msg.setDisplay(value);
      break;
    case 5:
      var value = /** @type {string} */ (reader.readString());
      msg.setName(value);
      break;
    case 6:
      var value = /** @type {string} */ (reader.readString());
      msg.setSymbol(value);
      break;
    case 7:
      var value = /** @type {string} */ (reader.readString());
      msg.setUri(value);
      break;
    case 8:
      var value = /** @type {string} */ (reader.readString());
      msg.setUriHash(value);
      break;
    case 1984:
      var value = new proto.penumbra.core.asset.v1alpha1.AssetId;
      reader.readMessage(value,proto.penumbra.core.asset.v1alpha1.AssetId.deserializeBinaryFromReader);
      msg.setPenumbraAssetId(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.penumbra.core.asset.v1alpha1.DenomMetadata.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.penumbra.core.asset.v1alpha1.DenomMetadata.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.penumbra.core.asset.v1alpha1.DenomMetadata} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.penumbra.core.asset.v1alpha1.DenomMetadata.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getDescription();
  if (f.length > 0) {
    writer.writeString(
      1,
      f
    );
  }
  f = message.getDenomUnitsList();
  if (f.length > 0) {
    writer.writeRepeatedMessage(
      2,
      f,
      proto.penumbra.core.asset.v1alpha1.DenomUnit.serializeBinaryToWriter
    );
  }
  f = message.getBase();
  if (f.length > 0) {
    writer.writeString(
      3,
      f
    );
  }
  f = message.getDisplay();
  if (f.length > 0) {
    writer.writeString(
      4,
      f
    );
  }
  f = message.getName();
  if (f.length > 0) {
    writer.writeString(
      5,
      f
    );
  }
  f = message.getSymbol();
  if (f.length > 0) {
    writer.writeString(
      6,
      f
    );
  }
  f = message.getUri();
  if (f.length > 0) {
    writer.writeString(
      7,
      f
    );
  }
  f = message.getUriHash();
  if (f.length > 0) {
    writer.writeString(
      8,
      f
    );
  }
  f = message.getPenumbraAssetId();
  if (f != null) {
    writer.writeMessage(
      1984,
      f,
      proto.penumbra.core.asset.v1alpha1.AssetId.serializeBinaryToWriter
    );
  }
};


/**
 * optional string description = 1;
 * @return {string}
 */
proto.penumbra.core.asset.v1alpha1.DenomMetadata.prototype.getDescription = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 1, ""));
};


/**
 * @param {string} value
 * @return {!proto.penumbra.core.asset.v1alpha1.DenomMetadata} returns this
 */
proto.penumbra.core.asset.v1alpha1.DenomMetadata.prototype.setDescription = function(value) {
  return jspb.Message.setProto3StringField(this, 1, value);
};


/**
 * repeated DenomUnit denom_units = 2;
 * @return {!Array<!proto.penumbra.core.asset.v1alpha1.DenomUnit>}
 */
proto.penumbra.core.asset.v1alpha1.DenomMetadata.prototype.getDenomUnitsList = function() {
  return /** @type{!Array<!proto.penumbra.core.asset.v1alpha1.DenomUnit>} */ (
    jspb.Message.getRepeatedWrapperField(this, proto.penumbra.core.asset.v1alpha1.DenomUnit, 2));
};


/**
 * @param {!Array<!proto.penumbra.core.asset.v1alpha1.DenomUnit>} value
 * @return {!proto.penumbra.core.asset.v1alpha1.DenomMetadata} returns this
*/
proto.penumbra.core.asset.v1alpha1.DenomMetadata.prototype.setDenomUnitsList = function(value) {
  return jspb.Message.setRepeatedWrapperField(this, 2, value);
};


/**
 * @param {!proto.penumbra.core.asset.v1alpha1.DenomUnit=} opt_value
 * @param {number=} opt_index
 * @return {!proto.penumbra.core.asset.v1alpha1.DenomUnit}
 */
proto.penumbra.core.asset.v1alpha1.DenomMetadata.prototype.addDenomUnits = function(opt_value, opt_index) {
  return jspb.Message.addToRepeatedWrapperField(this, 2, opt_value, proto.penumbra.core.asset.v1alpha1.DenomUnit, opt_index);
};


/**
 * Clears the list making it empty but non-null.
 * @return {!proto.penumbra.core.asset.v1alpha1.DenomMetadata} returns this
 */
proto.penumbra.core.asset.v1alpha1.DenomMetadata.prototype.clearDenomUnitsList = function() {
  return this.setDenomUnitsList([]);
};


/**
 * optional string base = 3;
 * @return {string}
 */
proto.penumbra.core.asset.v1alpha1.DenomMetadata.prototype.getBase = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 3, ""));
};


/**
 * @param {string} value
 * @return {!proto.penumbra.core.asset.v1alpha1.DenomMetadata} returns this
 */
proto.penumbra.core.asset.v1alpha1.DenomMetadata.prototype.setBase = function(value) {
  return jspb.Message.setProto3StringField(this, 3, value);
};


/**
 * optional string display = 4;
 * @return {string}
 */
proto.penumbra.core.asset.v1alpha1.DenomMetadata.prototype.getDisplay = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 4, ""));
};


/**
 * @param {string} value
 * @return {!proto.penumbra.core.asset.v1alpha1.DenomMetadata} returns this
 */
proto.penumbra.core.asset.v1alpha1.DenomMetadata.prototype.setDisplay = function(value) {
  return jspb.Message.setProto3StringField(this, 4, value);
};


/**
 * optional string name = 5;
 * @return {string}
 */
proto.penumbra.core.asset.v1alpha1.DenomMetadata.prototype.getName = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 5, ""));
};


/**
 * @param {string} value
 * @return {!proto.penumbra.core.asset.v1alpha1.DenomMetadata} returns this
 */
proto.penumbra.core.asset.v1alpha1.DenomMetadata.prototype.setName = function(value) {
  return jspb.Message.setProto3StringField(this, 5, value);
};


/**
 * optional string symbol = 6;
 * @return {string}
 */
proto.penumbra.core.asset.v1alpha1.DenomMetadata.prototype.getSymbol = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 6, ""));
};


/**
 * @param {string} value
 * @return {!proto.penumbra.core.asset.v1alpha1.DenomMetadata} returns this
 */
proto.penumbra.core.asset.v1alpha1.DenomMetadata.prototype.setSymbol = function(value) {
  return jspb.Message.setProto3StringField(this, 6, value);
};


/**
 * optional string uri = 7;
 * @return {string}
 */
proto.penumbra.core.asset.v1alpha1.DenomMetadata.prototype.getUri = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 7, ""));
};


/**
 * @param {string} value
 * @return {!proto.penumbra.core.asset.v1alpha1.DenomMetadata} returns this
 */
proto.penumbra.core.asset.v1alpha1.DenomMetadata.prototype.setUri = function(value) {
  return jspb.Message.setProto3StringField(this, 7, value);
};


/**
 * optional string uri_hash = 8;
 * @return {string}
 */
proto.penumbra.core.asset.v1alpha1.DenomMetadata.prototype.getUriHash = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 8, ""));
};


/**
 * @param {string} value
 * @return {!proto.penumbra.core.asset.v1alpha1.DenomMetadata} returns this
 */
proto.penumbra.core.asset.v1alpha1.DenomMetadata.prototype.setUriHash = function(value) {
  return jspb.Message.setProto3StringField(this, 8, value);
};


/**
 * optional AssetId penumbra_asset_id = 1984;
 * @return {?proto.penumbra.core.asset.v1alpha1.AssetId}
 */
proto.penumbra.core.asset.v1alpha1.DenomMetadata.prototype.getPenumbraAssetId = function() {
  return /** @type{?proto.penumbra.core.asset.v1alpha1.AssetId} */ (
    jspb.Message.getWrapperField(this, proto.penumbra.core.asset.v1alpha1.AssetId, 1984));
};


/**
 * @param {?proto.penumbra.core.asset.v1alpha1.AssetId|undefined} value
 * @return {!proto.penumbra.core.asset.v1alpha1.DenomMetadata} returns this
*/
proto.penumbra.core.asset.v1alpha1.DenomMetadata.prototype.setPenumbraAssetId = function(value) {
  return jspb.Message.setWrapperField(this, 1984, value);
};


/**
 * Clears the message field making it undefined.
 * @return {!proto.penumbra.core.asset.v1alpha1.DenomMetadata} returns this
 */
proto.penumbra.core.asset.v1alpha1.DenomMetadata.prototype.clearPenumbraAssetId = function() {
  return this.setPenumbraAssetId(undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.penumbra.core.asset.v1alpha1.DenomMetadata.prototype.hasPenumbraAssetId = function() {
  return jspb.Message.getField(this, 1984) != null;
};



/**
 * List of repeated fields within this message type.
 * @private {!Array<number>}
 * @const
 */
proto.penumbra.core.asset.v1alpha1.DenomUnit.repeatedFields_ = [3];



if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.penumbra.core.asset.v1alpha1.DenomUnit.prototype.toObject = function(opt_includeInstance) {
  return proto.penumbra.core.asset.v1alpha1.DenomUnit.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.penumbra.core.asset.v1alpha1.DenomUnit} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.penumbra.core.asset.v1alpha1.DenomUnit.toObject = function(includeInstance, msg) {
  var f, obj = {
    denom: jspb.Message.getFieldWithDefault(msg, 1, ""),
    exponent: jspb.Message.getFieldWithDefault(msg, 2, 0),
    aliasesList: (f = jspb.Message.getRepeatedField(msg, 3)) == null ? undefined : f
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.penumbra.core.asset.v1alpha1.DenomUnit}
 */
proto.penumbra.core.asset.v1alpha1.DenomUnit.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.penumbra.core.asset.v1alpha1.DenomUnit;
  return proto.penumbra.core.asset.v1alpha1.DenomUnit.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.penumbra.core.asset.v1alpha1.DenomUnit} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.penumbra.core.asset.v1alpha1.DenomUnit}
 */
proto.penumbra.core.asset.v1alpha1.DenomUnit.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {string} */ (reader.readString());
      msg.setDenom(value);
      break;
    case 2:
      var value = /** @type {number} */ (reader.readUint32());
      msg.setExponent(value);
      break;
    case 3:
      var value = /** @type {string} */ (reader.readString());
      msg.addAliases(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.penumbra.core.asset.v1alpha1.DenomUnit.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.penumbra.core.asset.v1alpha1.DenomUnit.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.penumbra.core.asset.v1alpha1.DenomUnit} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.penumbra.core.asset.v1alpha1.DenomUnit.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getDenom();
  if (f.length > 0) {
    writer.writeString(
      1,
      f
    );
  }
  f = message.getExponent();
  if (f !== 0) {
    writer.writeUint32(
      2,
      f
    );
  }
  f = message.getAliasesList();
  if (f.length > 0) {
    writer.writeRepeatedString(
      3,
      f
    );
  }
};


/**
 * optional string denom = 1;
 * @return {string}
 */
proto.penumbra.core.asset.v1alpha1.DenomUnit.prototype.getDenom = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 1, ""));
};


/**
 * @param {string} value
 * @return {!proto.penumbra.core.asset.v1alpha1.DenomUnit} returns this
 */
proto.penumbra.core.asset.v1alpha1.DenomUnit.prototype.setDenom = function(value) {
  return jspb.Message.setProto3StringField(this, 1, value);
};


/**
 * optional uint32 exponent = 2;
 * @return {number}
 */
proto.penumbra.core.asset.v1alpha1.DenomUnit.prototype.getExponent = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 2, 0));
};


/**
 * @param {number} value
 * @return {!proto.penumbra.core.asset.v1alpha1.DenomUnit} returns this
 */
proto.penumbra.core.asset.v1alpha1.DenomUnit.prototype.setExponent = function(value) {
  return jspb.Message.setProto3IntField(this, 2, value);
};


/**
 * repeated string aliases = 3;
 * @return {!Array<string>}
 */
proto.penumbra.core.asset.v1alpha1.DenomUnit.prototype.getAliasesList = function() {
  return /** @type {!Array<string>} */ (jspb.Message.getRepeatedField(this, 3));
};


/**
 * @param {!Array<string>} value
 * @return {!proto.penumbra.core.asset.v1alpha1.DenomUnit} returns this
 */
proto.penumbra.core.asset.v1alpha1.DenomUnit.prototype.setAliasesList = function(value) {
  return jspb.Message.setField(this, 3, value || []);
};


/**
 * @param {string} value
 * @param {number=} opt_index
 * @return {!proto.penumbra.core.asset.v1alpha1.DenomUnit} returns this
 */
proto.penumbra.core.asset.v1alpha1.DenomUnit.prototype.addAliases = function(value, opt_index) {
  return jspb.Message.addToRepeatedField(this, 3, value, opt_index);
};


/**
 * Clears the list making it empty but non-null.
 * @return {!proto.penumbra.core.asset.v1alpha1.DenomUnit} returns this
 */
proto.penumbra.core.asset.v1alpha1.DenomUnit.prototype.clearAliasesList = function() {
  return this.setAliasesList([]);
};





if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.penumbra.core.asset.v1alpha1.Value.prototype.toObject = function(opt_includeInstance) {
  return proto.penumbra.core.asset.v1alpha1.Value.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.penumbra.core.asset.v1alpha1.Value} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.penumbra.core.asset.v1alpha1.Value.toObject = function(includeInstance, msg) {
  var f, obj = {
    amount: (f = msg.getAmount()) && penumbra_core_num_v1alpha1_num_pb.Amount.toObject(includeInstance, f),
    assetId: (f = msg.getAssetId()) && proto.penumbra.core.asset.v1alpha1.AssetId.toObject(includeInstance, f)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.penumbra.core.asset.v1alpha1.Value}
 */
proto.penumbra.core.asset.v1alpha1.Value.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.penumbra.core.asset.v1alpha1.Value;
  return proto.penumbra.core.asset.v1alpha1.Value.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.penumbra.core.asset.v1alpha1.Value} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.penumbra.core.asset.v1alpha1.Value}
 */
proto.penumbra.core.asset.v1alpha1.Value.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = new penumbra_core_num_v1alpha1_num_pb.Amount;
      reader.readMessage(value,penumbra_core_num_v1alpha1_num_pb.Amount.deserializeBinaryFromReader);
      msg.setAmount(value);
      break;
    case 2:
      var value = new proto.penumbra.core.asset.v1alpha1.AssetId;
      reader.readMessage(value,proto.penumbra.core.asset.v1alpha1.AssetId.deserializeBinaryFromReader);
      msg.setAssetId(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.penumbra.core.asset.v1alpha1.Value.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.penumbra.core.asset.v1alpha1.Value.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.penumbra.core.asset.v1alpha1.Value} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.penumbra.core.asset.v1alpha1.Value.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getAmount();
  if (f != null) {
    writer.writeMessage(
      1,
      f,
      penumbra_core_num_v1alpha1_num_pb.Amount.serializeBinaryToWriter
    );
  }
  f = message.getAssetId();
  if (f != null) {
    writer.writeMessage(
      2,
      f,
      proto.penumbra.core.asset.v1alpha1.AssetId.serializeBinaryToWriter
    );
  }
};


/**
 * optional penumbra.core.num.v1alpha1.Amount amount = 1;
 * @return {?proto.penumbra.core.num.v1alpha1.Amount}
 */
proto.penumbra.core.asset.v1alpha1.Value.prototype.getAmount = function() {
  return /** @type{?proto.penumbra.core.num.v1alpha1.Amount} */ (
    jspb.Message.getWrapperField(this, penumbra_core_num_v1alpha1_num_pb.Amount, 1));
};


/**
 * @param {?proto.penumbra.core.num.v1alpha1.Amount|undefined} value
 * @return {!proto.penumbra.core.asset.v1alpha1.Value} returns this
*/
proto.penumbra.core.asset.v1alpha1.Value.prototype.setAmount = function(value) {
  return jspb.Message.setWrapperField(this, 1, value);
};


/**
 * Clears the message field making it undefined.
 * @return {!proto.penumbra.core.asset.v1alpha1.Value} returns this
 */
proto.penumbra.core.asset.v1alpha1.Value.prototype.clearAmount = function() {
  return this.setAmount(undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.penumbra.core.asset.v1alpha1.Value.prototype.hasAmount = function() {
  return jspb.Message.getField(this, 1) != null;
};


/**
 * optional AssetId asset_id = 2;
 * @return {?proto.penumbra.core.asset.v1alpha1.AssetId}
 */
proto.penumbra.core.asset.v1alpha1.Value.prototype.getAssetId = function() {
  return /** @type{?proto.penumbra.core.asset.v1alpha1.AssetId} */ (
    jspb.Message.getWrapperField(this, proto.penumbra.core.asset.v1alpha1.AssetId, 2));
};


/**
 * @param {?proto.penumbra.core.asset.v1alpha1.AssetId|undefined} value
 * @return {!proto.penumbra.core.asset.v1alpha1.Value} returns this
*/
proto.penumbra.core.asset.v1alpha1.Value.prototype.setAssetId = function(value) {
  return jspb.Message.setWrapperField(this, 2, value);
};


/**
 * Clears the message field making it undefined.
 * @return {!proto.penumbra.core.asset.v1alpha1.Value} returns this
 */
proto.penumbra.core.asset.v1alpha1.Value.prototype.clearAssetId = function() {
  return this.setAssetId(undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.penumbra.core.asset.v1alpha1.Value.prototype.hasAssetId = function() {
  return jspb.Message.getField(this, 2) != null;
};



/**
 * Oneof group definitions for this message. Each group defines the field
 * numbers belonging to that group. When of these fields' value is set, all
 * other fields in the group are cleared. During deserialization, if multiple
 * fields are encountered for a group, only the last value seen will be kept.
 * @private {!Array<!Array<number>>}
 * @const
 */
proto.penumbra.core.asset.v1alpha1.ValueView.oneofGroups_ = [[1,2]];

/**
 * @enum {number}
 */
proto.penumbra.core.asset.v1alpha1.ValueView.ValueViewCase = {
  VALUE_VIEW_NOT_SET: 0,
  KNOWN_DENOM: 1,
  UNKNOWN_DENOM: 2
};

/**
 * @return {proto.penumbra.core.asset.v1alpha1.ValueView.ValueViewCase}
 */
proto.penumbra.core.asset.v1alpha1.ValueView.prototype.getValueViewCase = function() {
  return /** @type {proto.penumbra.core.asset.v1alpha1.ValueView.ValueViewCase} */(jspb.Message.computeOneofCase(this, proto.penumbra.core.asset.v1alpha1.ValueView.oneofGroups_[0]));
};



if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.penumbra.core.asset.v1alpha1.ValueView.prototype.toObject = function(opt_includeInstance) {
  return proto.penumbra.core.asset.v1alpha1.ValueView.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.penumbra.core.asset.v1alpha1.ValueView} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.penumbra.core.asset.v1alpha1.ValueView.toObject = function(includeInstance, msg) {
  var f, obj = {
    knownDenom: (f = msg.getKnownDenom()) && proto.penumbra.core.asset.v1alpha1.ValueView.KnownDenom.toObject(includeInstance, f),
    unknownDenom: (f = msg.getUnknownDenom()) && proto.penumbra.core.asset.v1alpha1.ValueView.UnknownDenom.toObject(includeInstance, f)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.penumbra.core.asset.v1alpha1.ValueView}
 */
proto.penumbra.core.asset.v1alpha1.ValueView.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.penumbra.core.asset.v1alpha1.ValueView;
  return proto.penumbra.core.asset.v1alpha1.ValueView.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.penumbra.core.asset.v1alpha1.ValueView} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.penumbra.core.asset.v1alpha1.ValueView}
 */
proto.penumbra.core.asset.v1alpha1.ValueView.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = new proto.penumbra.core.asset.v1alpha1.ValueView.KnownDenom;
      reader.readMessage(value,proto.penumbra.core.asset.v1alpha1.ValueView.KnownDenom.deserializeBinaryFromReader);
      msg.setKnownDenom(value);
      break;
    case 2:
      var value = new proto.penumbra.core.asset.v1alpha1.ValueView.UnknownDenom;
      reader.readMessage(value,proto.penumbra.core.asset.v1alpha1.ValueView.UnknownDenom.deserializeBinaryFromReader);
      msg.setUnknownDenom(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.penumbra.core.asset.v1alpha1.ValueView.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.penumbra.core.asset.v1alpha1.ValueView.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.penumbra.core.asset.v1alpha1.ValueView} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.penumbra.core.asset.v1alpha1.ValueView.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getKnownDenom();
  if (f != null) {
    writer.writeMessage(
      1,
      f,
      proto.penumbra.core.asset.v1alpha1.ValueView.KnownDenom.serializeBinaryToWriter
    );
  }
  f = message.getUnknownDenom();
  if (f != null) {
    writer.writeMessage(
      2,
      f,
      proto.penumbra.core.asset.v1alpha1.ValueView.UnknownDenom.serializeBinaryToWriter
    );
  }
};





if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.penumbra.core.asset.v1alpha1.ValueView.KnownDenom.prototype.toObject = function(opt_includeInstance) {
  return proto.penumbra.core.asset.v1alpha1.ValueView.KnownDenom.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.penumbra.core.asset.v1alpha1.ValueView.KnownDenom} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.penumbra.core.asset.v1alpha1.ValueView.KnownDenom.toObject = function(includeInstance, msg) {
  var f, obj = {
    amount: (f = msg.getAmount()) && penumbra_core_num_v1alpha1_num_pb.Amount.toObject(includeInstance, f),
    denom: (f = msg.getDenom()) && proto.penumbra.core.asset.v1alpha1.DenomMetadata.toObject(includeInstance, f)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.penumbra.core.asset.v1alpha1.ValueView.KnownDenom}
 */
proto.penumbra.core.asset.v1alpha1.ValueView.KnownDenom.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.penumbra.core.asset.v1alpha1.ValueView.KnownDenom;
  return proto.penumbra.core.asset.v1alpha1.ValueView.KnownDenom.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.penumbra.core.asset.v1alpha1.ValueView.KnownDenom} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.penumbra.core.asset.v1alpha1.ValueView.KnownDenom}
 */
proto.penumbra.core.asset.v1alpha1.ValueView.KnownDenom.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = new penumbra_core_num_v1alpha1_num_pb.Amount;
      reader.readMessage(value,penumbra_core_num_v1alpha1_num_pb.Amount.deserializeBinaryFromReader);
      msg.setAmount(value);
      break;
    case 2:
      var value = new proto.penumbra.core.asset.v1alpha1.DenomMetadata;
      reader.readMessage(value,proto.penumbra.core.asset.v1alpha1.DenomMetadata.deserializeBinaryFromReader);
      msg.setDenom(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.penumbra.core.asset.v1alpha1.ValueView.KnownDenom.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.penumbra.core.asset.v1alpha1.ValueView.KnownDenom.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.penumbra.core.asset.v1alpha1.ValueView.KnownDenom} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.penumbra.core.asset.v1alpha1.ValueView.KnownDenom.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getAmount();
  if (f != null) {
    writer.writeMessage(
      1,
      f,
      penumbra_core_num_v1alpha1_num_pb.Amount.serializeBinaryToWriter
    );
  }
  f = message.getDenom();
  if (f != null) {
    writer.writeMessage(
      2,
      f,
      proto.penumbra.core.asset.v1alpha1.DenomMetadata.serializeBinaryToWriter
    );
  }
};


/**
 * optional penumbra.core.num.v1alpha1.Amount amount = 1;
 * @return {?proto.penumbra.core.num.v1alpha1.Amount}
 */
proto.penumbra.core.asset.v1alpha1.ValueView.KnownDenom.prototype.getAmount = function() {
  return /** @type{?proto.penumbra.core.num.v1alpha1.Amount} */ (
    jspb.Message.getWrapperField(this, penumbra_core_num_v1alpha1_num_pb.Amount, 1));
};


/**
 * @param {?proto.penumbra.core.num.v1alpha1.Amount|undefined} value
 * @return {!proto.penumbra.core.asset.v1alpha1.ValueView.KnownDenom} returns this
*/
proto.penumbra.core.asset.v1alpha1.ValueView.KnownDenom.prototype.setAmount = function(value) {
  return jspb.Message.setWrapperField(this, 1, value);
};


/**
 * Clears the message field making it undefined.
 * @return {!proto.penumbra.core.asset.v1alpha1.ValueView.KnownDenom} returns this
 */
proto.penumbra.core.asset.v1alpha1.ValueView.KnownDenom.prototype.clearAmount = function() {
  return this.setAmount(undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.penumbra.core.asset.v1alpha1.ValueView.KnownDenom.prototype.hasAmount = function() {
  return jspb.Message.getField(this, 1) != null;
};


/**
 * optional DenomMetadata denom = 2;
 * @return {?proto.penumbra.core.asset.v1alpha1.DenomMetadata}
 */
proto.penumbra.core.asset.v1alpha1.ValueView.KnownDenom.prototype.getDenom = function() {
  return /** @type{?proto.penumbra.core.asset.v1alpha1.DenomMetadata} */ (
    jspb.Message.getWrapperField(this, proto.penumbra.core.asset.v1alpha1.DenomMetadata, 2));
};


/**
 * @param {?proto.penumbra.core.asset.v1alpha1.DenomMetadata|undefined} value
 * @return {!proto.penumbra.core.asset.v1alpha1.ValueView.KnownDenom} returns this
*/
proto.penumbra.core.asset.v1alpha1.ValueView.KnownDenom.prototype.setDenom = function(value) {
  return jspb.Message.setWrapperField(this, 2, value);
};


/**
 * Clears the message field making it undefined.
 * @return {!proto.penumbra.core.asset.v1alpha1.ValueView.KnownDenom} returns this
 */
proto.penumbra.core.asset.v1alpha1.ValueView.KnownDenom.prototype.clearDenom = function() {
  return this.setDenom(undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.penumbra.core.asset.v1alpha1.ValueView.KnownDenom.prototype.hasDenom = function() {
  return jspb.Message.getField(this, 2) != null;
};





if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.penumbra.core.asset.v1alpha1.ValueView.UnknownDenom.prototype.toObject = function(opt_includeInstance) {
  return proto.penumbra.core.asset.v1alpha1.ValueView.UnknownDenom.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.penumbra.core.asset.v1alpha1.ValueView.UnknownDenom} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.penumbra.core.asset.v1alpha1.ValueView.UnknownDenom.toObject = function(includeInstance, msg) {
  var f, obj = {
    amount: (f = msg.getAmount()) && penumbra_core_num_v1alpha1_num_pb.Amount.toObject(includeInstance, f),
    assetId: (f = msg.getAssetId()) && proto.penumbra.core.asset.v1alpha1.AssetId.toObject(includeInstance, f)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.penumbra.core.asset.v1alpha1.ValueView.UnknownDenom}
 */
proto.penumbra.core.asset.v1alpha1.ValueView.UnknownDenom.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.penumbra.core.asset.v1alpha1.ValueView.UnknownDenom;
  return proto.penumbra.core.asset.v1alpha1.ValueView.UnknownDenom.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.penumbra.core.asset.v1alpha1.ValueView.UnknownDenom} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.penumbra.core.asset.v1alpha1.ValueView.UnknownDenom}
 */
proto.penumbra.core.asset.v1alpha1.ValueView.UnknownDenom.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = new penumbra_core_num_v1alpha1_num_pb.Amount;
      reader.readMessage(value,penumbra_core_num_v1alpha1_num_pb.Amount.deserializeBinaryFromReader);
      msg.setAmount(value);
      break;
    case 2:
      var value = new proto.penumbra.core.asset.v1alpha1.AssetId;
      reader.readMessage(value,proto.penumbra.core.asset.v1alpha1.AssetId.deserializeBinaryFromReader);
      msg.setAssetId(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.penumbra.core.asset.v1alpha1.ValueView.UnknownDenom.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.penumbra.core.asset.v1alpha1.ValueView.UnknownDenom.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.penumbra.core.asset.v1alpha1.ValueView.UnknownDenom} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.penumbra.core.asset.v1alpha1.ValueView.UnknownDenom.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getAmount();
  if (f != null) {
    writer.writeMessage(
      1,
      f,
      penumbra_core_num_v1alpha1_num_pb.Amount.serializeBinaryToWriter
    );
  }
  f = message.getAssetId();
  if (f != null) {
    writer.writeMessage(
      2,
      f,
      proto.penumbra.core.asset.v1alpha1.AssetId.serializeBinaryToWriter
    );
  }
};


/**
 * optional penumbra.core.num.v1alpha1.Amount amount = 1;
 * @return {?proto.penumbra.core.num.v1alpha1.Amount}
 */
proto.penumbra.core.asset.v1alpha1.ValueView.UnknownDenom.prototype.getAmount = function() {
  return /** @type{?proto.penumbra.core.num.v1alpha1.Amount} */ (
    jspb.Message.getWrapperField(this, penumbra_core_num_v1alpha1_num_pb.Amount, 1));
};


/**
 * @param {?proto.penumbra.core.num.v1alpha1.Amount|undefined} value
 * @return {!proto.penumbra.core.asset.v1alpha1.ValueView.UnknownDenom} returns this
*/
proto.penumbra.core.asset.v1alpha1.ValueView.UnknownDenom.prototype.setAmount = function(value) {
  return jspb.Message.setWrapperField(this, 1, value);
};


/**
 * Clears the message field making it undefined.
 * @return {!proto.penumbra.core.asset.v1alpha1.ValueView.UnknownDenom} returns this
 */
proto.penumbra.core.asset.v1alpha1.ValueView.UnknownDenom.prototype.clearAmount = function() {
  return this.setAmount(undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.penumbra.core.asset.v1alpha1.ValueView.UnknownDenom.prototype.hasAmount = function() {
  return jspb.Message.getField(this, 1) != null;
};


/**
 * optional AssetId asset_id = 2;
 * @return {?proto.penumbra.core.asset.v1alpha1.AssetId}
 */
proto.penumbra.core.asset.v1alpha1.ValueView.UnknownDenom.prototype.getAssetId = function() {
  return /** @type{?proto.penumbra.core.asset.v1alpha1.AssetId} */ (
    jspb.Message.getWrapperField(this, proto.penumbra.core.asset.v1alpha1.AssetId, 2));
};


/**
 * @param {?proto.penumbra.core.asset.v1alpha1.AssetId|undefined} value
 * @return {!proto.penumbra.core.asset.v1alpha1.ValueView.UnknownDenom} returns this
*/
proto.penumbra.core.asset.v1alpha1.ValueView.UnknownDenom.prototype.setAssetId = function(value) {
  return jspb.Message.setWrapperField(this, 2, value);
};


/**
 * Clears the message field making it undefined.
 * @return {!proto.penumbra.core.asset.v1alpha1.ValueView.UnknownDenom} returns this
 */
proto.penumbra.core.asset.v1alpha1.ValueView.UnknownDenom.prototype.clearAssetId = function() {
  return this.setAssetId(undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.penumbra.core.asset.v1alpha1.ValueView.UnknownDenom.prototype.hasAssetId = function() {
  return jspb.Message.getField(this, 2) != null;
};


/**
 * optional KnownDenom known_denom = 1;
 * @return {?proto.penumbra.core.asset.v1alpha1.ValueView.KnownDenom}
 */
proto.penumbra.core.asset.v1alpha1.ValueView.prototype.getKnownDenom = function() {
  return /** @type{?proto.penumbra.core.asset.v1alpha1.ValueView.KnownDenom} */ (
    jspb.Message.getWrapperField(this, proto.penumbra.core.asset.v1alpha1.ValueView.KnownDenom, 1));
};


/**
 * @param {?proto.penumbra.core.asset.v1alpha1.ValueView.KnownDenom|undefined} value
 * @return {!proto.penumbra.core.asset.v1alpha1.ValueView} returns this
*/
proto.penumbra.core.asset.v1alpha1.ValueView.prototype.setKnownDenom = function(value) {
  return jspb.Message.setOneofWrapperField(this, 1, proto.penumbra.core.asset.v1alpha1.ValueView.oneofGroups_[0], value);
};


/**
 * Clears the message field making it undefined.
 * @return {!proto.penumbra.core.asset.v1alpha1.ValueView} returns this
 */
proto.penumbra.core.asset.v1alpha1.ValueView.prototype.clearKnownDenom = function() {
  return this.setKnownDenom(undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.penumbra.core.asset.v1alpha1.ValueView.prototype.hasKnownDenom = function() {
  return jspb.Message.getField(this, 1) != null;
};


/**
 * optional UnknownDenom unknown_denom = 2;
 * @return {?proto.penumbra.core.asset.v1alpha1.ValueView.UnknownDenom}
 */
proto.penumbra.core.asset.v1alpha1.ValueView.prototype.getUnknownDenom = function() {
  return /** @type{?proto.penumbra.core.asset.v1alpha1.ValueView.UnknownDenom} */ (
    jspb.Message.getWrapperField(this, proto.penumbra.core.asset.v1alpha1.ValueView.UnknownDenom, 2));
};


/**
 * @param {?proto.penumbra.core.asset.v1alpha1.ValueView.UnknownDenom|undefined} value
 * @return {!proto.penumbra.core.asset.v1alpha1.ValueView} returns this
*/
proto.penumbra.core.asset.v1alpha1.ValueView.prototype.setUnknownDenom = function(value) {
  return jspb.Message.setOneofWrapperField(this, 2, proto.penumbra.core.asset.v1alpha1.ValueView.oneofGroups_[0], value);
};


/**
 * Clears the message field making it undefined.
 * @return {!proto.penumbra.core.asset.v1alpha1.ValueView} returns this
 */
proto.penumbra.core.asset.v1alpha1.ValueView.prototype.clearUnknownDenom = function() {
  return this.setUnknownDenom(undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.penumbra.core.asset.v1alpha1.ValueView.prototype.hasUnknownDenom = function() {
  return jspb.Message.getField(this, 2) != null;
};


goog.object.extend(exports, proto.penumbra.core.asset.v1alpha1);
