// source: penumbra/core/component/fee/v1alpha1/fee.proto
/**
 * @fileoverview
 * @enhanceable
 * @suppress {missingRequire} reports error on implicit type usages.
 * @suppress {messageConventions} JS Compiler reports an error if a variable or
 *     field starts with 'MSG_' and isn't a translatable message.
 * @public
 */
// GENERATED CODE -- DO NOT EDIT!
/* eslint-disable */
// @ts-nocheck

var jspb = require('google-protobuf');
var goog = jspb;
var global = (function() {
  if (this) { return this; }
  if (typeof window !== 'undefined') { return window; }
  if (typeof global !== 'undefined') { return global; }
  if (typeof self !== 'undefined') { return self; }
  return Function('return this')();
}.call(null));

var penumbra_core_num_v1alpha1_num_pb = require('../../../../../penumbra/core/num/v1alpha1/num_pb.js');
goog.object.extend(proto, penumbra_core_num_v1alpha1_num_pb);
var penumbra_core_asset_v1alpha1_asset_pb = require('../../../../../penumbra/core/asset/v1alpha1/asset_pb.js');
goog.object.extend(proto, penumbra_core_asset_v1alpha1_asset_pb);
goog.exportSymbol('proto.penumbra.core.component.fee.v1alpha1.Fee', null, global);
goog.exportSymbol('proto.penumbra.core.component.fee.v1alpha1.FeeParameters', null, global);
goog.exportSymbol('proto.penumbra.core.component.fee.v1alpha1.GasPrices', null, global);
goog.exportSymbol('proto.penumbra.core.component.fee.v1alpha1.GenesisContent', null, global);
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.penumbra.core.component.fee.v1alpha1.Fee = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.penumbra.core.component.fee.v1alpha1.Fee, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.penumbra.core.component.fee.v1alpha1.Fee.displayName = 'proto.penumbra.core.component.fee.v1alpha1.Fee';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.penumbra.core.component.fee.v1alpha1.GasPrices = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.penumbra.core.component.fee.v1alpha1.GasPrices, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.penumbra.core.component.fee.v1alpha1.GasPrices.displayName = 'proto.penumbra.core.component.fee.v1alpha1.GasPrices';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.penumbra.core.component.fee.v1alpha1.FeeParameters = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.penumbra.core.component.fee.v1alpha1.FeeParameters, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.penumbra.core.component.fee.v1alpha1.FeeParameters.displayName = 'proto.penumbra.core.component.fee.v1alpha1.FeeParameters';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.penumbra.core.component.fee.v1alpha1.GenesisContent = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.penumbra.core.component.fee.v1alpha1.GenesisContent, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.penumbra.core.component.fee.v1alpha1.GenesisContent.displayName = 'proto.penumbra.core.component.fee.v1alpha1.GenesisContent';
}



if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.penumbra.core.component.fee.v1alpha1.Fee.prototype.toObject = function(opt_includeInstance) {
  return proto.penumbra.core.component.fee.v1alpha1.Fee.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.penumbra.core.component.fee.v1alpha1.Fee} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.penumbra.core.component.fee.v1alpha1.Fee.toObject = function(includeInstance, msg) {
  var f, obj = {
    amount: (f = msg.getAmount()) && penumbra_core_num_v1alpha1_num_pb.Amount.toObject(includeInstance, f),
    assetId: (f = msg.getAssetId()) && penumbra_core_asset_v1alpha1_asset_pb.AssetId.toObject(includeInstance, f)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.penumbra.core.component.fee.v1alpha1.Fee}
 */
proto.penumbra.core.component.fee.v1alpha1.Fee.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.penumbra.core.component.fee.v1alpha1.Fee;
  return proto.penumbra.core.component.fee.v1alpha1.Fee.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.penumbra.core.component.fee.v1alpha1.Fee} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.penumbra.core.component.fee.v1alpha1.Fee}
 */
proto.penumbra.core.component.fee.v1alpha1.Fee.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = new penumbra_core_num_v1alpha1_num_pb.Amount;
      reader.readMessage(value,penumbra_core_num_v1alpha1_num_pb.Amount.deserializeBinaryFromReader);
      msg.setAmount(value);
      break;
    case 2:
      var value = new penumbra_core_asset_v1alpha1_asset_pb.AssetId;
      reader.readMessage(value,penumbra_core_asset_v1alpha1_asset_pb.AssetId.deserializeBinaryFromReader);
      msg.setAssetId(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.penumbra.core.component.fee.v1alpha1.Fee.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.penumbra.core.component.fee.v1alpha1.Fee.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.penumbra.core.component.fee.v1alpha1.Fee} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.penumbra.core.component.fee.v1alpha1.Fee.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getAmount();
  if (f != null) {
    writer.writeMessage(
      1,
      f,
      penumbra_core_num_v1alpha1_num_pb.Amount.serializeBinaryToWriter
    );
  }
  f = message.getAssetId();
  if (f != null) {
    writer.writeMessage(
      2,
      f,
      penumbra_core_asset_v1alpha1_asset_pb.AssetId.serializeBinaryToWriter
    );
  }
};


/**
 * optional penumbra.core.num.v1alpha1.Amount amount = 1;
 * @return {?proto.penumbra.core.num.v1alpha1.Amount}
 */
proto.penumbra.core.component.fee.v1alpha1.Fee.prototype.getAmount = function() {
  return /** @type{?proto.penumbra.core.num.v1alpha1.Amount} */ (
    jspb.Message.getWrapperField(this, penumbra_core_num_v1alpha1_num_pb.Amount, 1));
};


/**
 * @param {?proto.penumbra.core.num.v1alpha1.Amount|undefined} value
 * @return {!proto.penumbra.core.component.fee.v1alpha1.Fee} returns this
*/
proto.penumbra.core.component.fee.v1alpha1.Fee.prototype.setAmount = function(value) {
  return jspb.Message.setWrapperField(this, 1, value);
};


/**
 * Clears the message field making it undefined.
 * @return {!proto.penumbra.core.component.fee.v1alpha1.Fee} returns this
 */
proto.penumbra.core.component.fee.v1alpha1.Fee.prototype.clearAmount = function() {
  return this.setAmount(undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.penumbra.core.component.fee.v1alpha1.Fee.prototype.hasAmount = function() {
  return jspb.Message.getField(this, 1) != null;
};


/**
 * optional penumbra.core.asset.v1alpha1.AssetId asset_id = 2;
 * @return {?proto.penumbra.core.asset.v1alpha1.AssetId}
 */
proto.penumbra.core.component.fee.v1alpha1.Fee.prototype.getAssetId = function() {
  return /** @type{?proto.penumbra.core.asset.v1alpha1.AssetId} */ (
    jspb.Message.getWrapperField(this, penumbra_core_asset_v1alpha1_asset_pb.AssetId, 2));
};


/**
 * @param {?proto.penumbra.core.asset.v1alpha1.AssetId|undefined} value
 * @return {!proto.penumbra.core.component.fee.v1alpha1.Fee} returns this
*/
proto.penumbra.core.component.fee.v1alpha1.Fee.prototype.setAssetId = function(value) {
  return jspb.Message.setWrapperField(this, 2, value);
};


/**
 * Clears the message field making it undefined.
 * @return {!proto.penumbra.core.component.fee.v1alpha1.Fee} returns this
 */
proto.penumbra.core.component.fee.v1alpha1.Fee.prototype.clearAssetId = function() {
  return this.setAssetId(undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.penumbra.core.component.fee.v1alpha1.Fee.prototype.hasAssetId = function() {
  return jspb.Message.getField(this, 2) != null;
};





if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.penumbra.core.component.fee.v1alpha1.GasPrices.prototype.toObject = function(opt_includeInstance) {
  return proto.penumbra.core.component.fee.v1alpha1.GasPrices.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.penumbra.core.component.fee.v1alpha1.GasPrices} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.penumbra.core.component.fee.v1alpha1.GasPrices.toObject = function(includeInstance, msg) {
  var f, obj = {
    blockSpacePrice: jspb.Message.getFieldWithDefault(msg, 1, 0),
    compactBlockSpacePrice: jspb.Message.getFieldWithDefault(msg, 2, 0),
    verificationPrice: jspb.Message.getFieldWithDefault(msg, 3, 0),
    executionPrice: jspb.Message.getFieldWithDefault(msg, 4, 0)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.penumbra.core.component.fee.v1alpha1.GasPrices}
 */
proto.penumbra.core.component.fee.v1alpha1.GasPrices.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.penumbra.core.component.fee.v1alpha1.GasPrices;
  return proto.penumbra.core.component.fee.v1alpha1.GasPrices.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.penumbra.core.component.fee.v1alpha1.GasPrices} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.penumbra.core.component.fee.v1alpha1.GasPrices}
 */
proto.penumbra.core.component.fee.v1alpha1.GasPrices.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {number} */ (reader.readUint64());
      msg.setBlockSpacePrice(value);
      break;
    case 2:
      var value = /** @type {number} */ (reader.readUint64());
      msg.setCompactBlockSpacePrice(value);
      break;
    case 3:
      var value = /** @type {number} */ (reader.readUint64());
      msg.setVerificationPrice(value);
      break;
    case 4:
      var value = /** @type {number} */ (reader.readUint64());
      msg.setExecutionPrice(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.penumbra.core.component.fee.v1alpha1.GasPrices.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.penumbra.core.component.fee.v1alpha1.GasPrices.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.penumbra.core.component.fee.v1alpha1.GasPrices} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.penumbra.core.component.fee.v1alpha1.GasPrices.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getBlockSpacePrice();
  if (f !== 0) {
    writer.writeUint64(
      1,
      f
    );
  }
  f = message.getCompactBlockSpacePrice();
  if (f !== 0) {
    writer.writeUint64(
      2,
      f
    );
  }
  f = message.getVerificationPrice();
  if (f !== 0) {
    writer.writeUint64(
      3,
      f
    );
  }
  f = message.getExecutionPrice();
  if (f !== 0) {
    writer.writeUint64(
      4,
      f
    );
  }
};


/**
 * optional uint64 block_space_price = 1;
 * @return {number}
 */
proto.penumbra.core.component.fee.v1alpha1.GasPrices.prototype.getBlockSpacePrice = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 1, 0));
};


/**
 * @param {number} value
 * @return {!proto.penumbra.core.component.fee.v1alpha1.GasPrices} returns this
 */
proto.penumbra.core.component.fee.v1alpha1.GasPrices.prototype.setBlockSpacePrice = function(value) {
  return jspb.Message.setProto3IntField(this, 1, value);
};


/**
 * optional uint64 compact_block_space_price = 2;
 * @return {number}
 */
proto.penumbra.core.component.fee.v1alpha1.GasPrices.prototype.getCompactBlockSpacePrice = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 2, 0));
};


/**
 * @param {number} value
 * @return {!proto.penumbra.core.component.fee.v1alpha1.GasPrices} returns this
 */
proto.penumbra.core.component.fee.v1alpha1.GasPrices.prototype.setCompactBlockSpacePrice = function(value) {
  return jspb.Message.setProto3IntField(this, 2, value);
};


/**
 * optional uint64 verification_price = 3;
 * @return {number}
 */
proto.penumbra.core.component.fee.v1alpha1.GasPrices.prototype.getVerificationPrice = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 3, 0));
};


/**
 * @param {number} value
 * @return {!proto.penumbra.core.component.fee.v1alpha1.GasPrices} returns this
 */
proto.penumbra.core.component.fee.v1alpha1.GasPrices.prototype.setVerificationPrice = function(value) {
  return jspb.Message.setProto3IntField(this, 3, value);
};


/**
 * optional uint64 execution_price = 4;
 * @return {number}
 */
proto.penumbra.core.component.fee.v1alpha1.GasPrices.prototype.getExecutionPrice = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 4, 0));
};


/**
 * @param {number} value
 * @return {!proto.penumbra.core.component.fee.v1alpha1.GasPrices} returns this
 */
proto.penumbra.core.component.fee.v1alpha1.GasPrices.prototype.setExecutionPrice = function(value) {
  return jspb.Message.setProto3IntField(this, 4, value);
};





if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.penumbra.core.component.fee.v1alpha1.FeeParameters.prototype.toObject = function(opt_includeInstance) {
  return proto.penumbra.core.component.fee.v1alpha1.FeeParameters.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.penumbra.core.component.fee.v1alpha1.FeeParameters} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.penumbra.core.component.fee.v1alpha1.FeeParameters.toObject = function(includeInstance, msg) {
  var f, obj = {

  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.penumbra.core.component.fee.v1alpha1.FeeParameters}
 */
proto.penumbra.core.component.fee.v1alpha1.FeeParameters.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.penumbra.core.component.fee.v1alpha1.FeeParameters;
  return proto.penumbra.core.component.fee.v1alpha1.FeeParameters.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.penumbra.core.component.fee.v1alpha1.FeeParameters} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.penumbra.core.component.fee.v1alpha1.FeeParameters}
 */
proto.penumbra.core.component.fee.v1alpha1.FeeParameters.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.penumbra.core.component.fee.v1alpha1.FeeParameters.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.penumbra.core.component.fee.v1alpha1.FeeParameters.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.penumbra.core.component.fee.v1alpha1.FeeParameters} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.penumbra.core.component.fee.v1alpha1.FeeParameters.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
};





if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.penumbra.core.component.fee.v1alpha1.GenesisContent.prototype.toObject = function(opt_includeInstance) {
  return proto.penumbra.core.component.fee.v1alpha1.GenesisContent.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.penumbra.core.component.fee.v1alpha1.GenesisContent} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.penumbra.core.component.fee.v1alpha1.GenesisContent.toObject = function(includeInstance, msg) {
  var f, obj = {
    feeParams: (f = msg.getFeeParams()) && proto.penumbra.core.component.fee.v1alpha1.FeeParameters.toObject(includeInstance, f),
    gasPrices: (f = msg.getGasPrices()) && proto.penumbra.core.component.fee.v1alpha1.GasPrices.toObject(includeInstance, f)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.penumbra.core.component.fee.v1alpha1.GenesisContent}
 */
proto.penumbra.core.component.fee.v1alpha1.GenesisContent.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.penumbra.core.component.fee.v1alpha1.GenesisContent;
  return proto.penumbra.core.component.fee.v1alpha1.GenesisContent.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.penumbra.core.component.fee.v1alpha1.GenesisContent} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.penumbra.core.component.fee.v1alpha1.GenesisContent}
 */
proto.penumbra.core.component.fee.v1alpha1.GenesisContent.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = new proto.penumbra.core.component.fee.v1alpha1.FeeParameters;
      reader.readMessage(value,proto.penumbra.core.component.fee.v1alpha1.FeeParameters.deserializeBinaryFromReader);
      msg.setFeeParams(value);
      break;
    case 2:
      var value = new proto.penumbra.core.component.fee.v1alpha1.GasPrices;
      reader.readMessage(value,proto.penumbra.core.component.fee.v1alpha1.GasPrices.deserializeBinaryFromReader);
      msg.setGasPrices(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.penumbra.core.component.fee.v1alpha1.GenesisContent.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.penumbra.core.component.fee.v1alpha1.GenesisContent.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.penumbra.core.component.fee.v1alpha1.GenesisContent} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.penumbra.core.component.fee.v1alpha1.GenesisContent.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getFeeParams();
  if (f != null) {
    writer.writeMessage(
      1,
      f,
      proto.penumbra.core.component.fee.v1alpha1.FeeParameters.serializeBinaryToWriter
    );
  }
  f = message.getGasPrices();
  if (f != null) {
    writer.writeMessage(
      2,
      f,
      proto.penumbra.core.component.fee.v1alpha1.GasPrices.serializeBinaryToWriter
    );
  }
};


/**
 * optional FeeParameters fee_params = 1;
 * @return {?proto.penumbra.core.component.fee.v1alpha1.FeeParameters}
 */
proto.penumbra.core.component.fee.v1alpha1.GenesisContent.prototype.getFeeParams = function() {
  return /** @type{?proto.penumbra.core.component.fee.v1alpha1.FeeParameters} */ (
    jspb.Message.getWrapperField(this, proto.penumbra.core.component.fee.v1alpha1.FeeParameters, 1));
};


/**
 * @param {?proto.penumbra.core.component.fee.v1alpha1.FeeParameters|undefined} value
 * @return {!proto.penumbra.core.component.fee.v1alpha1.GenesisContent} returns this
*/
proto.penumbra.core.component.fee.v1alpha1.GenesisContent.prototype.setFeeParams = function(value) {
  return jspb.Message.setWrapperField(this, 1, value);
};


/**
 * Clears the message field making it undefined.
 * @return {!proto.penumbra.core.component.fee.v1alpha1.GenesisContent} returns this
 */
proto.penumbra.core.component.fee.v1alpha1.GenesisContent.prototype.clearFeeParams = function() {
  return this.setFeeParams(undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.penumbra.core.component.fee.v1alpha1.GenesisContent.prototype.hasFeeParams = function() {
  return jspb.Message.getField(this, 1) != null;
};


/**
 * optional GasPrices gas_prices = 2;
 * @return {?proto.penumbra.core.component.fee.v1alpha1.GasPrices}
 */
proto.penumbra.core.component.fee.v1alpha1.GenesisContent.prototype.getGasPrices = function() {
  return /** @type{?proto.penumbra.core.component.fee.v1alpha1.GasPrices} */ (
    jspb.Message.getWrapperField(this, proto.penumbra.core.component.fee.v1alpha1.GasPrices, 2));
};


/**
 * @param {?proto.penumbra.core.component.fee.v1alpha1.GasPrices|undefined} value
 * @return {!proto.penumbra.core.component.fee.v1alpha1.GenesisContent} returns this
*/
proto.penumbra.core.component.fee.v1alpha1.GenesisContent.prototype.setGasPrices = function(value) {
  return jspb.Message.setWrapperField(this, 2, value);
};


/**
 * Clears the message field making it undefined.
 * @return {!proto.penumbra.core.component.fee.v1alpha1.GenesisContent} returns this
 */
proto.penumbra.core.component.fee.v1alpha1.GenesisContent.prototype.clearGasPrices = function() {
  return this.setGasPrices(undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.penumbra.core.component.fee.v1alpha1.GenesisContent.prototype.hasGasPrices = function() {
  return jspb.Message.getField(this, 2) != null;
};


goog.object.extend(exports, proto.penumbra.core.component.fee.v1alpha1);
