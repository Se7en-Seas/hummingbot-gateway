// source: penumbra/core/component/compact_block/v1alpha1/compact_block.proto
/**
 * @fileoverview
 * @enhanceable
 * @suppress {missingRequire} reports error on implicit type usages.
 * @suppress {messageConventions} JS Compiler reports an error if a variable or
 *     field starts with 'MSG_' and isn't a translatable message.
 * @public
 */
// GENERATED CODE -- DO NOT EDIT!
/* eslint-disable */
// @ts-nocheck

var jspb = require('google-protobuf');
var goog = jspb;
var global = (function() {
  if (this) { return this; }
  if (typeof window !== 'undefined') { return window; }
  if (typeof global !== 'undefined') { return global; }
  if (typeof self !== 'undefined') { return self; }
  return Function('return this')();
}.call(null));

var penumbra_crypto_tct_v1alpha1_tct_pb = require('../../../../../penumbra/crypto/tct/v1alpha1/tct_pb.js');
goog.object.extend(proto, penumbra_crypto_tct_v1alpha1_tct_pb);
var penumbra_core_component_sct_v1alpha1_sct_pb = require('../../../../../penumbra/core/component/sct/v1alpha1/sct_pb.js');
goog.object.extend(proto, penumbra_core_component_sct_v1alpha1_sct_pb);
var penumbra_core_component_chain_v1alpha1_chain_pb = require('../../../../../penumbra/core/component/chain/v1alpha1/chain_pb.js');
goog.object.extend(proto, penumbra_core_component_chain_v1alpha1_chain_pb);
var penumbra_core_component_dex_v1alpha1_dex_pb = require('../../../../../penumbra/core/component/dex/v1alpha1/dex_pb.js');
goog.object.extend(proto, penumbra_core_component_dex_v1alpha1_dex_pb);
var penumbra_core_component_fee_v1alpha1_fee_pb = require('../../../../../penumbra/core/component/fee/v1alpha1/fee_pb.js');
goog.object.extend(proto, penumbra_core_component_fee_v1alpha1_fee_pb);
var penumbra_core_component_shielded_pool_v1alpha1_shielded_pool_pb = require('../../../../../penumbra/core/component/shielded_pool/v1alpha1/shielded_pool_pb.js');
goog.object.extend(proto, penumbra_core_component_shielded_pool_v1alpha1_shielded_pool_pb);
goog.exportSymbol('proto.penumbra.core.component.compact_block.v1alpha1.CompactBlock', null, global);
goog.exportSymbol('proto.penumbra.core.component.compact_block.v1alpha1.CompactBlockRangeRequest', null, global);
goog.exportSymbol('proto.penumbra.core.component.compact_block.v1alpha1.CompactBlockRangeResponse', null, global);
goog.exportSymbol('proto.penumbra.core.component.compact_block.v1alpha1.StatePayload', null, global);
goog.exportSymbol('proto.penumbra.core.component.compact_block.v1alpha1.StatePayload.Note', null, global);
goog.exportSymbol('proto.penumbra.core.component.compact_block.v1alpha1.StatePayload.RolledUp', null, global);
goog.exportSymbol('proto.penumbra.core.component.compact_block.v1alpha1.StatePayload.StatePayloadCase', null, global);
goog.exportSymbol('proto.penumbra.core.component.compact_block.v1alpha1.StatePayload.Swap', null, global);
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.penumbra.core.component.compact_block.v1alpha1.CompactBlock = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, proto.penumbra.core.component.compact_block.v1alpha1.CompactBlock.repeatedFields_, null);
};
goog.inherits(proto.penumbra.core.component.compact_block.v1alpha1.CompactBlock, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.penumbra.core.component.compact_block.v1alpha1.CompactBlock.displayName = 'proto.penumbra.core.component.compact_block.v1alpha1.CompactBlock';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.penumbra.core.component.compact_block.v1alpha1.StatePayload = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, proto.penumbra.core.component.compact_block.v1alpha1.StatePayload.oneofGroups_);
};
goog.inherits(proto.penumbra.core.component.compact_block.v1alpha1.StatePayload, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.penumbra.core.component.compact_block.v1alpha1.StatePayload.displayName = 'proto.penumbra.core.component.compact_block.v1alpha1.StatePayload';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.penumbra.core.component.compact_block.v1alpha1.StatePayload.RolledUp = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.penumbra.core.component.compact_block.v1alpha1.StatePayload.RolledUp, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.penumbra.core.component.compact_block.v1alpha1.StatePayload.RolledUp.displayName = 'proto.penumbra.core.component.compact_block.v1alpha1.StatePayload.RolledUp';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.penumbra.core.component.compact_block.v1alpha1.StatePayload.Note = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.penumbra.core.component.compact_block.v1alpha1.StatePayload.Note, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.penumbra.core.component.compact_block.v1alpha1.StatePayload.Note.displayName = 'proto.penumbra.core.component.compact_block.v1alpha1.StatePayload.Note';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.penumbra.core.component.compact_block.v1alpha1.StatePayload.Swap = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.penumbra.core.component.compact_block.v1alpha1.StatePayload.Swap, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.penumbra.core.component.compact_block.v1alpha1.StatePayload.Swap.displayName = 'proto.penumbra.core.component.compact_block.v1alpha1.StatePayload.Swap';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.penumbra.core.component.compact_block.v1alpha1.CompactBlockRangeRequest = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.penumbra.core.component.compact_block.v1alpha1.CompactBlockRangeRequest, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.penumbra.core.component.compact_block.v1alpha1.CompactBlockRangeRequest.displayName = 'proto.penumbra.core.component.compact_block.v1alpha1.CompactBlockRangeRequest';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.penumbra.core.component.compact_block.v1alpha1.CompactBlockRangeResponse = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.penumbra.core.component.compact_block.v1alpha1.CompactBlockRangeResponse, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.penumbra.core.component.compact_block.v1alpha1.CompactBlockRangeResponse.displayName = 'proto.penumbra.core.component.compact_block.v1alpha1.CompactBlockRangeResponse';
}

/**
 * List of repeated fields within this message type.
 * @private {!Array<number>}
 * @const
 */
proto.penumbra.core.component.compact_block.v1alpha1.CompactBlock.repeatedFields_ = [2,3,5];



if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.penumbra.core.component.compact_block.v1alpha1.CompactBlock.prototype.toObject = function(opt_includeInstance) {
  return proto.penumbra.core.component.compact_block.v1alpha1.CompactBlock.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.penumbra.core.component.compact_block.v1alpha1.CompactBlock} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.penumbra.core.component.compact_block.v1alpha1.CompactBlock.toObject = function(includeInstance, msg) {
  var f, obj = {
    height: jspb.Message.getFieldWithDefault(msg, 1, 0),
    statePayloadsList: jspb.Message.toObjectList(msg.getStatePayloadsList(),
    proto.penumbra.core.component.compact_block.v1alpha1.StatePayload.toObject, includeInstance),
    nullifiersList: jspb.Message.toObjectList(msg.getNullifiersList(),
    penumbra_core_component_sct_v1alpha1_sct_pb.Nullifier.toObject, includeInstance),
    blockRoot: (f = msg.getBlockRoot()) && penumbra_crypto_tct_v1alpha1_tct_pb.MerkleRoot.toObject(includeInstance, f),
    epochRoot: (f = msg.getEpochRoot()) && penumbra_crypto_tct_v1alpha1_tct_pb.MerkleRoot.toObject(includeInstance, f),
    proposalStarted: jspb.Message.getBooleanFieldWithDefault(msg, 20, false),
    fmdParameters: (f = msg.getFmdParameters()) && penumbra_core_component_chain_v1alpha1_chain_pb.FmdParameters.toObject(includeInstance, f),
    swapOutputsList: jspb.Message.toObjectList(msg.getSwapOutputsList(),
    penumbra_core_component_dex_v1alpha1_dex_pb.BatchSwapOutputData.toObject, includeInstance),
    appParametersUpdated: jspb.Message.getBooleanFieldWithDefault(msg, 6, false),
    gasPrices: (f = msg.getGasPrices()) && penumbra_core_component_fee_v1alpha1_fee_pb.GasPrices.toObject(includeInstance, f)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.penumbra.core.component.compact_block.v1alpha1.CompactBlock}
 */
proto.penumbra.core.component.compact_block.v1alpha1.CompactBlock.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.penumbra.core.component.compact_block.v1alpha1.CompactBlock;
  return proto.penumbra.core.component.compact_block.v1alpha1.CompactBlock.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.penumbra.core.component.compact_block.v1alpha1.CompactBlock} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.penumbra.core.component.compact_block.v1alpha1.CompactBlock}
 */
proto.penumbra.core.component.compact_block.v1alpha1.CompactBlock.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {number} */ (reader.readUint64());
      msg.setHeight(value);
      break;
    case 2:
      var value = new proto.penumbra.core.component.compact_block.v1alpha1.StatePayload;
      reader.readMessage(value,proto.penumbra.core.component.compact_block.v1alpha1.StatePayload.deserializeBinaryFromReader);
      msg.addStatePayloads(value);
      break;
    case 3:
      var value = new penumbra_core_component_sct_v1alpha1_sct_pb.Nullifier;
      reader.readMessage(value,penumbra_core_component_sct_v1alpha1_sct_pb.Nullifier.deserializeBinaryFromReader);
      msg.addNullifiers(value);
      break;
    case 4:
      var value = new penumbra_crypto_tct_v1alpha1_tct_pb.MerkleRoot;
      reader.readMessage(value,penumbra_crypto_tct_v1alpha1_tct_pb.MerkleRoot.deserializeBinaryFromReader);
      msg.setBlockRoot(value);
      break;
    case 17:
      var value = new penumbra_crypto_tct_v1alpha1_tct_pb.MerkleRoot;
      reader.readMessage(value,penumbra_crypto_tct_v1alpha1_tct_pb.MerkleRoot.deserializeBinaryFromReader);
      msg.setEpochRoot(value);
      break;
    case 20:
      var value = /** @type {boolean} */ (reader.readBool());
      msg.setProposalStarted(value);
      break;
    case 100:
      var value = new penumbra_core_component_chain_v1alpha1_chain_pb.FmdParameters;
      reader.readMessage(value,penumbra_core_component_chain_v1alpha1_chain_pb.FmdParameters.deserializeBinaryFromReader);
      msg.setFmdParameters(value);
      break;
    case 5:
      var value = new penumbra_core_component_dex_v1alpha1_dex_pb.BatchSwapOutputData;
      reader.readMessage(value,penumbra_core_component_dex_v1alpha1_dex_pb.BatchSwapOutputData.deserializeBinaryFromReader);
      msg.addSwapOutputs(value);
      break;
    case 6:
      var value = /** @type {boolean} */ (reader.readBool());
      msg.setAppParametersUpdated(value);
      break;
    case 7:
      var value = new penumbra_core_component_fee_v1alpha1_fee_pb.GasPrices;
      reader.readMessage(value,penumbra_core_component_fee_v1alpha1_fee_pb.GasPrices.deserializeBinaryFromReader);
      msg.setGasPrices(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.penumbra.core.component.compact_block.v1alpha1.CompactBlock.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.penumbra.core.component.compact_block.v1alpha1.CompactBlock.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.penumbra.core.component.compact_block.v1alpha1.CompactBlock} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.penumbra.core.component.compact_block.v1alpha1.CompactBlock.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getHeight();
  if (f !== 0) {
    writer.writeUint64(
      1,
      f
    );
  }
  f = message.getStatePayloadsList();
  if (f.length > 0) {
    writer.writeRepeatedMessage(
      2,
      f,
      proto.penumbra.core.component.compact_block.v1alpha1.StatePayload.serializeBinaryToWriter
    );
  }
  f = message.getNullifiersList();
  if (f.length > 0) {
    writer.writeRepeatedMessage(
      3,
      f,
      penumbra_core_component_sct_v1alpha1_sct_pb.Nullifier.serializeBinaryToWriter
    );
  }
  f = message.getBlockRoot();
  if (f != null) {
    writer.writeMessage(
      4,
      f,
      penumbra_crypto_tct_v1alpha1_tct_pb.MerkleRoot.serializeBinaryToWriter
    );
  }
  f = message.getEpochRoot();
  if (f != null) {
    writer.writeMessage(
      17,
      f,
      penumbra_crypto_tct_v1alpha1_tct_pb.MerkleRoot.serializeBinaryToWriter
    );
  }
  f = message.getProposalStarted();
  if (f) {
    writer.writeBool(
      20,
      f
    );
  }
  f = message.getFmdParameters();
  if (f != null) {
    writer.writeMessage(
      100,
      f,
      penumbra_core_component_chain_v1alpha1_chain_pb.FmdParameters.serializeBinaryToWriter
    );
  }
  f = message.getSwapOutputsList();
  if (f.length > 0) {
    writer.writeRepeatedMessage(
      5,
      f,
      penumbra_core_component_dex_v1alpha1_dex_pb.BatchSwapOutputData.serializeBinaryToWriter
    );
  }
  f = message.getAppParametersUpdated();
  if (f) {
    writer.writeBool(
      6,
      f
    );
  }
  f = message.getGasPrices();
  if (f != null) {
    writer.writeMessage(
      7,
      f,
      penumbra_core_component_fee_v1alpha1_fee_pb.GasPrices.serializeBinaryToWriter
    );
  }
};


/**
 * optional uint64 height = 1;
 * @return {number}
 */
proto.penumbra.core.component.compact_block.v1alpha1.CompactBlock.prototype.getHeight = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 1, 0));
};


/**
 * @param {number} value
 * @return {!proto.penumbra.core.component.compact_block.v1alpha1.CompactBlock} returns this
 */
proto.penumbra.core.component.compact_block.v1alpha1.CompactBlock.prototype.setHeight = function(value) {
  return jspb.Message.setProto3IntField(this, 1, value);
};


/**
 * repeated StatePayload state_payloads = 2;
 * @return {!Array<!proto.penumbra.core.component.compact_block.v1alpha1.StatePayload>}
 */
proto.penumbra.core.component.compact_block.v1alpha1.CompactBlock.prototype.getStatePayloadsList = function() {
  return /** @type{!Array<!proto.penumbra.core.component.compact_block.v1alpha1.StatePayload>} */ (
    jspb.Message.getRepeatedWrapperField(this, proto.penumbra.core.component.compact_block.v1alpha1.StatePayload, 2));
};


/**
 * @param {!Array<!proto.penumbra.core.component.compact_block.v1alpha1.StatePayload>} value
 * @return {!proto.penumbra.core.component.compact_block.v1alpha1.CompactBlock} returns this
*/
proto.penumbra.core.component.compact_block.v1alpha1.CompactBlock.prototype.setStatePayloadsList = function(value) {
  return jspb.Message.setRepeatedWrapperField(this, 2, value);
};


/**
 * @param {!proto.penumbra.core.component.compact_block.v1alpha1.StatePayload=} opt_value
 * @param {number=} opt_index
 * @return {!proto.penumbra.core.component.compact_block.v1alpha1.StatePayload}
 */
proto.penumbra.core.component.compact_block.v1alpha1.CompactBlock.prototype.addStatePayloads = function(opt_value, opt_index) {
  return jspb.Message.addToRepeatedWrapperField(this, 2, opt_value, proto.penumbra.core.component.compact_block.v1alpha1.StatePayload, opt_index);
};


/**
 * Clears the list making it empty but non-null.
 * @return {!proto.penumbra.core.component.compact_block.v1alpha1.CompactBlock} returns this
 */
proto.penumbra.core.component.compact_block.v1alpha1.CompactBlock.prototype.clearStatePayloadsList = function() {
  return this.setStatePayloadsList([]);
};


/**
 * repeated penumbra.core.component.sct.v1alpha1.Nullifier nullifiers = 3;
 * @return {!Array<!proto.penumbra.core.component.sct.v1alpha1.Nullifier>}
 */
proto.penumbra.core.component.compact_block.v1alpha1.CompactBlock.prototype.getNullifiersList = function() {
  return /** @type{!Array<!proto.penumbra.core.component.sct.v1alpha1.Nullifier>} */ (
    jspb.Message.getRepeatedWrapperField(this, penumbra_core_component_sct_v1alpha1_sct_pb.Nullifier, 3));
};


/**
 * @param {!Array<!proto.penumbra.core.component.sct.v1alpha1.Nullifier>} value
 * @return {!proto.penumbra.core.component.compact_block.v1alpha1.CompactBlock} returns this
*/
proto.penumbra.core.component.compact_block.v1alpha1.CompactBlock.prototype.setNullifiersList = function(value) {
  return jspb.Message.setRepeatedWrapperField(this, 3, value);
};


/**
 * @param {!proto.penumbra.core.component.sct.v1alpha1.Nullifier=} opt_value
 * @param {number=} opt_index
 * @return {!proto.penumbra.core.component.sct.v1alpha1.Nullifier}
 */
proto.penumbra.core.component.compact_block.v1alpha1.CompactBlock.prototype.addNullifiers = function(opt_value, opt_index) {
  return jspb.Message.addToRepeatedWrapperField(this, 3, opt_value, proto.penumbra.core.component.sct.v1alpha1.Nullifier, opt_index);
};


/**
 * Clears the list making it empty but non-null.
 * @return {!proto.penumbra.core.component.compact_block.v1alpha1.CompactBlock} returns this
 */
proto.penumbra.core.component.compact_block.v1alpha1.CompactBlock.prototype.clearNullifiersList = function() {
  return this.setNullifiersList([]);
};


/**
 * optional penumbra.crypto.tct.v1alpha1.MerkleRoot block_root = 4;
 * @return {?proto.penumbra.crypto.tct.v1alpha1.MerkleRoot}
 */
proto.penumbra.core.component.compact_block.v1alpha1.CompactBlock.prototype.getBlockRoot = function() {
  return /** @type{?proto.penumbra.crypto.tct.v1alpha1.MerkleRoot} */ (
    jspb.Message.getWrapperField(this, penumbra_crypto_tct_v1alpha1_tct_pb.MerkleRoot, 4));
};


/**
 * @param {?proto.penumbra.crypto.tct.v1alpha1.MerkleRoot|undefined} value
 * @return {!proto.penumbra.core.component.compact_block.v1alpha1.CompactBlock} returns this
*/
proto.penumbra.core.component.compact_block.v1alpha1.CompactBlock.prototype.setBlockRoot = function(value) {
  return jspb.Message.setWrapperField(this, 4, value);
};


/**
 * Clears the message field making it undefined.
 * @return {!proto.penumbra.core.component.compact_block.v1alpha1.CompactBlock} returns this
 */
proto.penumbra.core.component.compact_block.v1alpha1.CompactBlock.prototype.clearBlockRoot = function() {
  return this.setBlockRoot(undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.penumbra.core.component.compact_block.v1alpha1.CompactBlock.prototype.hasBlockRoot = function() {
  return jspb.Message.getField(this, 4) != null;
};


/**
 * optional penumbra.crypto.tct.v1alpha1.MerkleRoot epoch_root = 17;
 * @return {?proto.penumbra.crypto.tct.v1alpha1.MerkleRoot}
 */
proto.penumbra.core.component.compact_block.v1alpha1.CompactBlock.prototype.getEpochRoot = function() {
  return /** @type{?proto.penumbra.crypto.tct.v1alpha1.MerkleRoot} */ (
    jspb.Message.getWrapperField(this, penumbra_crypto_tct_v1alpha1_tct_pb.MerkleRoot, 17));
};


/**
 * @param {?proto.penumbra.crypto.tct.v1alpha1.MerkleRoot|undefined} value
 * @return {!proto.penumbra.core.component.compact_block.v1alpha1.CompactBlock} returns this
*/
proto.penumbra.core.component.compact_block.v1alpha1.CompactBlock.prototype.setEpochRoot = function(value) {
  return jspb.Message.setWrapperField(this, 17, value);
};


/**
 * Clears the message field making it undefined.
 * @return {!proto.penumbra.core.component.compact_block.v1alpha1.CompactBlock} returns this
 */
proto.penumbra.core.component.compact_block.v1alpha1.CompactBlock.prototype.clearEpochRoot = function() {
  return this.setEpochRoot(undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.penumbra.core.component.compact_block.v1alpha1.CompactBlock.prototype.hasEpochRoot = function() {
  return jspb.Message.getField(this, 17) != null;
};


/**
 * optional bool proposal_started = 20;
 * @return {boolean}
 */
proto.penumbra.core.component.compact_block.v1alpha1.CompactBlock.prototype.getProposalStarted = function() {
  return /** @type {boolean} */ (jspb.Message.getBooleanFieldWithDefault(this, 20, false));
};


/**
 * @param {boolean} value
 * @return {!proto.penumbra.core.component.compact_block.v1alpha1.CompactBlock} returns this
 */
proto.penumbra.core.component.compact_block.v1alpha1.CompactBlock.prototype.setProposalStarted = function(value) {
  return jspb.Message.setProto3BooleanField(this, 20, value);
};


/**
 * optional penumbra.core.component.chain.v1alpha1.FmdParameters fmd_parameters = 100;
 * @return {?proto.penumbra.core.component.chain.v1alpha1.FmdParameters}
 */
proto.penumbra.core.component.compact_block.v1alpha1.CompactBlock.prototype.getFmdParameters = function() {
  return /** @type{?proto.penumbra.core.component.chain.v1alpha1.FmdParameters} */ (
    jspb.Message.getWrapperField(this, penumbra_core_component_chain_v1alpha1_chain_pb.FmdParameters, 100));
};


/**
 * @param {?proto.penumbra.core.component.chain.v1alpha1.FmdParameters|undefined} value
 * @return {!proto.penumbra.core.component.compact_block.v1alpha1.CompactBlock} returns this
*/
proto.penumbra.core.component.compact_block.v1alpha1.CompactBlock.prototype.setFmdParameters = function(value) {
  return jspb.Message.setWrapperField(this, 100, value);
};


/**
 * Clears the message field making it undefined.
 * @return {!proto.penumbra.core.component.compact_block.v1alpha1.CompactBlock} returns this
 */
proto.penumbra.core.component.compact_block.v1alpha1.CompactBlock.prototype.clearFmdParameters = function() {
  return this.setFmdParameters(undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.penumbra.core.component.compact_block.v1alpha1.CompactBlock.prototype.hasFmdParameters = function() {
  return jspb.Message.getField(this, 100) != null;
};


/**
 * repeated penumbra.core.component.dex.v1alpha1.BatchSwapOutputData swap_outputs = 5;
 * @return {!Array<!proto.penumbra.core.component.dex.v1alpha1.BatchSwapOutputData>}
 */
proto.penumbra.core.component.compact_block.v1alpha1.CompactBlock.prototype.getSwapOutputsList = function() {
  return /** @type{!Array<!proto.penumbra.core.component.dex.v1alpha1.BatchSwapOutputData>} */ (
    jspb.Message.getRepeatedWrapperField(this, penumbra_core_component_dex_v1alpha1_dex_pb.BatchSwapOutputData, 5));
};


/**
 * @param {!Array<!proto.penumbra.core.component.dex.v1alpha1.BatchSwapOutputData>} value
 * @return {!proto.penumbra.core.component.compact_block.v1alpha1.CompactBlock} returns this
*/
proto.penumbra.core.component.compact_block.v1alpha1.CompactBlock.prototype.setSwapOutputsList = function(value) {
  return jspb.Message.setRepeatedWrapperField(this, 5, value);
};


/**
 * @param {!proto.penumbra.core.component.dex.v1alpha1.BatchSwapOutputData=} opt_value
 * @param {number=} opt_index
 * @return {!proto.penumbra.core.component.dex.v1alpha1.BatchSwapOutputData}
 */
proto.penumbra.core.component.compact_block.v1alpha1.CompactBlock.prototype.addSwapOutputs = function(opt_value, opt_index) {
  return jspb.Message.addToRepeatedWrapperField(this, 5, opt_value, proto.penumbra.core.component.dex.v1alpha1.BatchSwapOutputData, opt_index);
};


/**
 * Clears the list making it empty but non-null.
 * @return {!proto.penumbra.core.component.compact_block.v1alpha1.CompactBlock} returns this
 */
proto.penumbra.core.component.compact_block.v1alpha1.CompactBlock.prototype.clearSwapOutputsList = function() {
  return this.setSwapOutputsList([]);
};


/**
 * optional bool app_parameters_updated = 6;
 * @return {boolean}
 */
proto.penumbra.core.component.compact_block.v1alpha1.CompactBlock.prototype.getAppParametersUpdated = function() {
  return /** @type {boolean} */ (jspb.Message.getBooleanFieldWithDefault(this, 6, false));
};


/**
 * @param {boolean} value
 * @return {!proto.penumbra.core.component.compact_block.v1alpha1.CompactBlock} returns this
 */
proto.penumbra.core.component.compact_block.v1alpha1.CompactBlock.prototype.setAppParametersUpdated = function(value) {
  return jspb.Message.setProto3BooleanField(this, 6, value);
};


/**
 * optional penumbra.core.component.fee.v1alpha1.GasPrices gas_prices = 7;
 * @return {?proto.penumbra.core.component.fee.v1alpha1.GasPrices}
 */
proto.penumbra.core.component.compact_block.v1alpha1.CompactBlock.prototype.getGasPrices = function() {
  return /** @type{?proto.penumbra.core.component.fee.v1alpha1.GasPrices} */ (
    jspb.Message.getWrapperField(this, penumbra_core_component_fee_v1alpha1_fee_pb.GasPrices, 7));
};


/**
 * @param {?proto.penumbra.core.component.fee.v1alpha1.GasPrices|undefined} value
 * @return {!proto.penumbra.core.component.compact_block.v1alpha1.CompactBlock} returns this
*/
proto.penumbra.core.component.compact_block.v1alpha1.CompactBlock.prototype.setGasPrices = function(value) {
  return jspb.Message.setWrapperField(this, 7, value);
};


/**
 * Clears the message field making it undefined.
 * @return {!proto.penumbra.core.component.compact_block.v1alpha1.CompactBlock} returns this
 */
proto.penumbra.core.component.compact_block.v1alpha1.CompactBlock.prototype.clearGasPrices = function() {
  return this.setGasPrices(undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.penumbra.core.component.compact_block.v1alpha1.CompactBlock.prototype.hasGasPrices = function() {
  return jspb.Message.getField(this, 7) != null;
};



/**
 * Oneof group definitions for this message. Each group defines the field
 * numbers belonging to that group. When of these fields' value is set, all
 * other fields in the group are cleared. During deserialization, if multiple
 * fields are encountered for a group, only the last value seen will be kept.
 * @private {!Array<!Array<number>>}
 * @const
 */
proto.penumbra.core.component.compact_block.v1alpha1.StatePayload.oneofGroups_ = [[1,2,3]];

/**
 * @enum {number}
 */
proto.penumbra.core.component.compact_block.v1alpha1.StatePayload.StatePayloadCase = {
  STATE_PAYLOAD_NOT_SET: 0,
  ROLLED_UP: 1,
  NOTE: 2,
  SWAP: 3
};

/**
 * @return {proto.penumbra.core.component.compact_block.v1alpha1.StatePayload.StatePayloadCase}
 */
proto.penumbra.core.component.compact_block.v1alpha1.StatePayload.prototype.getStatePayloadCase = function() {
  return /** @type {proto.penumbra.core.component.compact_block.v1alpha1.StatePayload.StatePayloadCase} */(jspb.Message.computeOneofCase(this, proto.penumbra.core.component.compact_block.v1alpha1.StatePayload.oneofGroups_[0]));
};



if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.penumbra.core.component.compact_block.v1alpha1.StatePayload.prototype.toObject = function(opt_includeInstance) {
  return proto.penumbra.core.component.compact_block.v1alpha1.StatePayload.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.penumbra.core.component.compact_block.v1alpha1.StatePayload} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.penumbra.core.component.compact_block.v1alpha1.StatePayload.toObject = function(includeInstance, msg) {
  var f, obj = {
    rolledUp: (f = msg.getRolledUp()) && proto.penumbra.core.component.compact_block.v1alpha1.StatePayload.RolledUp.toObject(includeInstance, f),
    note: (f = msg.getNote()) && proto.penumbra.core.component.compact_block.v1alpha1.StatePayload.Note.toObject(includeInstance, f),
    swap: (f = msg.getSwap()) && proto.penumbra.core.component.compact_block.v1alpha1.StatePayload.Swap.toObject(includeInstance, f)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.penumbra.core.component.compact_block.v1alpha1.StatePayload}
 */
proto.penumbra.core.component.compact_block.v1alpha1.StatePayload.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.penumbra.core.component.compact_block.v1alpha1.StatePayload;
  return proto.penumbra.core.component.compact_block.v1alpha1.StatePayload.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.penumbra.core.component.compact_block.v1alpha1.StatePayload} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.penumbra.core.component.compact_block.v1alpha1.StatePayload}
 */
proto.penumbra.core.component.compact_block.v1alpha1.StatePayload.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = new proto.penumbra.core.component.compact_block.v1alpha1.StatePayload.RolledUp;
      reader.readMessage(value,proto.penumbra.core.component.compact_block.v1alpha1.StatePayload.RolledUp.deserializeBinaryFromReader);
      msg.setRolledUp(value);
      break;
    case 2:
      var value = new proto.penumbra.core.component.compact_block.v1alpha1.StatePayload.Note;
      reader.readMessage(value,proto.penumbra.core.component.compact_block.v1alpha1.StatePayload.Note.deserializeBinaryFromReader);
      msg.setNote(value);
      break;
    case 3:
      var value = new proto.penumbra.core.component.compact_block.v1alpha1.StatePayload.Swap;
      reader.readMessage(value,proto.penumbra.core.component.compact_block.v1alpha1.StatePayload.Swap.deserializeBinaryFromReader);
      msg.setSwap(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.penumbra.core.component.compact_block.v1alpha1.StatePayload.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.penumbra.core.component.compact_block.v1alpha1.StatePayload.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.penumbra.core.component.compact_block.v1alpha1.StatePayload} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.penumbra.core.component.compact_block.v1alpha1.StatePayload.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getRolledUp();
  if (f != null) {
    writer.writeMessage(
      1,
      f,
      proto.penumbra.core.component.compact_block.v1alpha1.StatePayload.RolledUp.serializeBinaryToWriter
    );
  }
  f = message.getNote();
  if (f != null) {
    writer.writeMessage(
      2,
      f,
      proto.penumbra.core.component.compact_block.v1alpha1.StatePayload.Note.serializeBinaryToWriter
    );
  }
  f = message.getSwap();
  if (f != null) {
    writer.writeMessage(
      3,
      f,
      proto.penumbra.core.component.compact_block.v1alpha1.StatePayload.Swap.serializeBinaryToWriter
    );
  }
};





if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.penumbra.core.component.compact_block.v1alpha1.StatePayload.RolledUp.prototype.toObject = function(opt_includeInstance) {
  return proto.penumbra.core.component.compact_block.v1alpha1.StatePayload.RolledUp.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.penumbra.core.component.compact_block.v1alpha1.StatePayload.RolledUp} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.penumbra.core.component.compact_block.v1alpha1.StatePayload.RolledUp.toObject = function(includeInstance, msg) {
  var f, obj = {
    commitment: (f = msg.getCommitment()) && penumbra_crypto_tct_v1alpha1_tct_pb.StateCommitment.toObject(includeInstance, f)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.penumbra.core.component.compact_block.v1alpha1.StatePayload.RolledUp}
 */
proto.penumbra.core.component.compact_block.v1alpha1.StatePayload.RolledUp.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.penumbra.core.component.compact_block.v1alpha1.StatePayload.RolledUp;
  return proto.penumbra.core.component.compact_block.v1alpha1.StatePayload.RolledUp.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.penumbra.core.component.compact_block.v1alpha1.StatePayload.RolledUp} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.penumbra.core.component.compact_block.v1alpha1.StatePayload.RolledUp}
 */
proto.penumbra.core.component.compact_block.v1alpha1.StatePayload.RolledUp.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = new penumbra_crypto_tct_v1alpha1_tct_pb.StateCommitment;
      reader.readMessage(value,penumbra_crypto_tct_v1alpha1_tct_pb.StateCommitment.deserializeBinaryFromReader);
      msg.setCommitment(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.penumbra.core.component.compact_block.v1alpha1.StatePayload.RolledUp.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.penumbra.core.component.compact_block.v1alpha1.StatePayload.RolledUp.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.penumbra.core.component.compact_block.v1alpha1.StatePayload.RolledUp} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.penumbra.core.component.compact_block.v1alpha1.StatePayload.RolledUp.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getCommitment();
  if (f != null) {
    writer.writeMessage(
      1,
      f,
      penumbra_crypto_tct_v1alpha1_tct_pb.StateCommitment.serializeBinaryToWriter
    );
  }
};


/**
 * optional penumbra.crypto.tct.v1alpha1.StateCommitment commitment = 1;
 * @return {?proto.penumbra.crypto.tct.v1alpha1.StateCommitment}
 */
proto.penumbra.core.component.compact_block.v1alpha1.StatePayload.RolledUp.prototype.getCommitment = function() {
  return /** @type{?proto.penumbra.crypto.tct.v1alpha1.StateCommitment} */ (
    jspb.Message.getWrapperField(this, penumbra_crypto_tct_v1alpha1_tct_pb.StateCommitment, 1));
};


/**
 * @param {?proto.penumbra.crypto.tct.v1alpha1.StateCommitment|undefined} value
 * @return {!proto.penumbra.core.component.compact_block.v1alpha1.StatePayload.RolledUp} returns this
*/
proto.penumbra.core.component.compact_block.v1alpha1.StatePayload.RolledUp.prototype.setCommitment = function(value) {
  return jspb.Message.setWrapperField(this, 1, value);
};


/**
 * Clears the message field making it undefined.
 * @return {!proto.penumbra.core.component.compact_block.v1alpha1.StatePayload.RolledUp} returns this
 */
proto.penumbra.core.component.compact_block.v1alpha1.StatePayload.RolledUp.prototype.clearCommitment = function() {
  return this.setCommitment(undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.penumbra.core.component.compact_block.v1alpha1.StatePayload.RolledUp.prototype.hasCommitment = function() {
  return jspb.Message.getField(this, 1) != null;
};





if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.penumbra.core.component.compact_block.v1alpha1.StatePayload.Note.prototype.toObject = function(opt_includeInstance) {
  return proto.penumbra.core.component.compact_block.v1alpha1.StatePayload.Note.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.penumbra.core.component.compact_block.v1alpha1.StatePayload.Note} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.penumbra.core.component.compact_block.v1alpha1.StatePayload.Note.toObject = function(includeInstance, msg) {
  var f, obj = {
    source: (f = msg.getSource()) && penumbra_core_component_chain_v1alpha1_chain_pb.NoteSource.toObject(includeInstance, f),
    note: (f = msg.getNote()) && penumbra_core_component_shielded_pool_v1alpha1_shielded_pool_pb.NotePayload.toObject(includeInstance, f)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.penumbra.core.component.compact_block.v1alpha1.StatePayload.Note}
 */
proto.penumbra.core.component.compact_block.v1alpha1.StatePayload.Note.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.penumbra.core.component.compact_block.v1alpha1.StatePayload.Note;
  return proto.penumbra.core.component.compact_block.v1alpha1.StatePayload.Note.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.penumbra.core.component.compact_block.v1alpha1.StatePayload.Note} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.penumbra.core.component.compact_block.v1alpha1.StatePayload.Note}
 */
proto.penumbra.core.component.compact_block.v1alpha1.StatePayload.Note.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = new penumbra_core_component_chain_v1alpha1_chain_pb.NoteSource;
      reader.readMessage(value,penumbra_core_component_chain_v1alpha1_chain_pb.NoteSource.deserializeBinaryFromReader);
      msg.setSource(value);
      break;
    case 2:
      var value = new penumbra_core_component_shielded_pool_v1alpha1_shielded_pool_pb.NotePayload;
      reader.readMessage(value,penumbra_core_component_shielded_pool_v1alpha1_shielded_pool_pb.NotePayload.deserializeBinaryFromReader);
      msg.setNote(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.penumbra.core.component.compact_block.v1alpha1.StatePayload.Note.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.penumbra.core.component.compact_block.v1alpha1.StatePayload.Note.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.penumbra.core.component.compact_block.v1alpha1.StatePayload.Note} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.penumbra.core.component.compact_block.v1alpha1.StatePayload.Note.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getSource();
  if (f != null) {
    writer.writeMessage(
      1,
      f,
      penumbra_core_component_chain_v1alpha1_chain_pb.NoteSource.serializeBinaryToWriter
    );
  }
  f = message.getNote();
  if (f != null) {
    writer.writeMessage(
      2,
      f,
      penumbra_core_component_shielded_pool_v1alpha1_shielded_pool_pb.NotePayload.serializeBinaryToWriter
    );
  }
};


/**
 * optional penumbra.core.component.chain.v1alpha1.NoteSource source = 1;
 * @return {?proto.penumbra.core.component.chain.v1alpha1.NoteSource}
 */
proto.penumbra.core.component.compact_block.v1alpha1.StatePayload.Note.prototype.getSource = function() {
  return /** @type{?proto.penumbra.core.component.chain.v1alpha1.NoteSource} */ (
    jspb.Message.getWrapperField(this, penumbra_core_component_chain_v1alpha1_chain_pb.NoteSource, 1));
};


/**
 * @param {?proto.penumbra.core.component.chain.v1alpha1.NoteSource|undefined} value
 * @return {!proto.penumbra.core.component.compact_block.v1alpha1.StatePayload.Note} returns this
*/
proto.penumbra.core.component.compact_block.v1alpha1.StatePayload.Note.prototype.setSource = function(value) {
  return jspb.Message.setWrapperField(this, 1, value);
};


/**
 * Clears the message field making it undefined.
 * @return {!proto.penumbra.core.component.compact_block.v1alpha1.StatePayload.Note} returns this
 */
proto.penumbra.core.component.compact_block.v1alpha1.StatePayload.Note.prototype.clearSource = function() {
  return this.setSource(undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.penumbra.core.component.compact_block.v1alpha1.StatePayload.Note.prototype.hasSource = function() {
  return jspb.Message.getField(this, 1) != null;
};


/**
 * optional penumbra.core.component.shielded_pool.v1alpha1.NotePayload note = 2;
 * @return {?proto.penumbra.core.component.shielded_pool.v1alpha1.NotePayload}
 */
proto.penumbra.core.component.compact_block.v1alpha1.StatePayload.Note.prototype.getNote = function() {
  return /** @type{?proto.penumbra.core.component.shielded_pool.v1alpha1.NotePayload} */ (
    jspb.Message.getWrapperField(this, penumbra_core_component_shielded_pool_v1alpha1_shielded_pool_pb.NotePayload, 2));
};


/**
 * @param {?proto.penumbra.core.component.shielded_pool.v1alpha1.NotePayload|undefined} value
 * @return {!proto.penumbra.core.component.compact_block.v1alpha1.StatePayload.Note} returns this
*/
proto.penumbra.core.component.compact_block.v1alpha1.StatePayload.Note.prototype.setNote = function(value) {
  return jspb.Message.setWrapperField(this, 2, value);
};


/**
 * Clears the message field making it undefined.
 * @return {!proto.penumbra.core.component.compact_block.v1alpha1.StatePayload.Note} returns this
 */
proto.penumbra.core.component.compact_block.v1alpha1.StatePayload.Note.prototype.clearNote = function() {
  return this.setNote(undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.penumbra.core.component.compact_block.v1alpha1.StatePayload.Note.prototype.hasNote = function() {
  return jspb.Message.getField(this, 2) != null;
};





if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.penumbra.core.component.compact_block.v1alpha1.StatePayload.Swap.prototype.toObject = function(opt_includeInstance) {
  return proto.penumbra.core.component.compact_block.v1alpha1.StatePayload.Swap.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.penumbra.core.component.compact_block.v1alpha1.StatePayload.Swap} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.penumbra.core.component.compact_block.v1alpha1.StatePayload.Swap.toObject = function(includeInstance, msg) {
  var f, obj = {
    source: (f = msg.getSource()) && penumbra_core_component_chain_v1alpha1_chain_pb.NoteSource.toObject(includeInstance, f),
    swap: (f = msg.getSwap()) && penumbra_core_component_dex_v1alpha1_dex_pb.SwapPayload.toObject(includeInstance, f)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.penumbra.core.component.compact_block.v1alpha1.StatePayload.Swap}
 */
proto.penumbra.core.component.compact_block.v1alpha1.StatePayload.Swap.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.penumbra.core.component.compact_block.v1alpha1.StatePayload.Swap;
  return proto.penumbra.core.component.compact_block.v1alpha1.StatePayload.Swap.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.penumbra.core.component.compact_block.v1alpha1.StatePayload.Swap} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.penumbra.core.component.compact_block.v1alpha1.StatePayload.Swap}
 */
proto.penumbra.core.component.compact_block.v1alpha1.StatePayload.Swap.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = new penumbra_core_component_chain_v1alpha1_chain_pb.NoteSource;
      reader.readMessage(value,penumbra_core_component_chain_v1alpha1_chain_pb.NoteSource.deserializeBinaryFromReader);
      msg.setSource(value);
      break;
    case 2:
      var value = new penumbra_core_component_dex_v1alpha1_dex_pb.SwapPayload;
      reader.readMessage(value,penumbra_core_component_dex_v1alpha1_dex_pb.SwapPayload.deserializeBinaryFromReader);
      msg.setSwap(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.penumbra.core.component.compact_block.v1alpha1.StatePayload.Swap.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.penumbra.core.component.compact_block.v1alpha1.StatePayload.Swap.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.penumbra.core.component.compact_block.v1alpha1.StatePayload.Swap} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.penumbra.core.component.compact_block.v1alpha1.StatePayload.Swap.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getSource();
  if (f != null) {
    writer.writeMessage(
      1,
      f,
      penumbra_core_component_chain_v1alpha1_chain_pb.NoteSource.serializeBinaryToWriter
    );
  }
  f = message.getSwap();
  if (f != null) {
    writer.writeMessage(
      2,
      f,
      penumbra_core_component_dex_v1alpha1_dex_pb.SwapPayload.serializeBinaryToWriter
    );
  }
};


/**
 * optional penumbra.core.component.chain.v1alpha1.NoteSource source = 1;
 * @return {?proto.penumbra.core.component.chain.v1alpha1.NoteSource}
 */
proto.penumbra.core.component.compact_block.v1alpha1.StatePayload.Swap.prototype.getSource = function() {
  return /** @type{?proto.penumbra.core.component.chain.v1alpha1.NoteSource} */ (
    jspb.Message.getWrapperField(this, penumbra_core_component_chain_v1alpha1_chain_pb.NoteSource, 1));
};


/**
 * @param {?proto.penumbra.core.component.chain.v1alpha1.NoteSource|undefined} value
 * @return {!proto.penumbra.core.component.compact_block.v1alpha1.StatePayload.Swap} returns this
*/
proto.penumbra.core.component.compact_block.v1alpha1.StatePayload.Swap.prototype.setSource = function(value) {
  return jspb.Message.setWrapperField(this, 1, value);
};


/**
 * Clears the message field making it undefined.
 * @return {!proto.penumbra.core.component.compact_block.v1alpha1.StatePayload.Swap} returns this
 */
proto.penumbra.core.component.compact_block.v1alpha1.StatePayload.Swap.prototype.clearSource = function() {
  return this.setSource(undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.penumbra.core.component.compact_block.v1alpha1.StatePayload.Swap.prototype.hasSource = function() {
  return jspb.Message.getField(this, 1) != null;
};


/**
 * optional penumbra.core.component.dex.v1alpha1.SwapPayload swap = 2;
 * @return {?proto.penumbra.core.component.dex.v1alpha1.SwapPayload}
 */
proto.penumbra.core.component.compact_block.v1alpha1.StatePayload.Swap.prototype.getSwap = function() {
  return /** @type{?proto.penumbra.core.component.dex.v1alpha1.SwapPayload} */ (
    jspb.Message.getWrapperField(this, penumbra_core_component_dex_v1alpha1_dex_pb.SwapPayload, 2));
};


/**
 * @param {?proto.penumbra.core.component.dex.v1alpha1.SwapPayload|undefined} value
 * @return {!proto.penumbra.core.component.compact_block.v1alpha1.StatePayload.Swap} returns this
*/
proto.penumbra.core.component.compact_block.v1alpha1.StatePayload.Swap.prototype.setSwap = function(value) {
  return jspb.Message.setWrapperField(this, 2, value);
};


/**
 * Clears the message field making it undefined.
 * @return {!proto.penumbra.core.component.compact_block.v1alpha1.StatePayload.Swap} returns this
 */
proto.penumbra.core.component.compact_block.v1alpha1.StatePayload.Swap.prototype.clearSwap = function() {
  return this.setSwap(undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.penumbra.core.component.compact_block.v1alpha1.StatePayload.Swap.prototype.hasSwap = function() {
  return jspb.Message.getField(this, 2) != null;
};


/**
 * optional RolledUp rolled_up = 1;
 * @return {?proto.penumbra.core.component.compact_block.v1alpha1.StatePayload.RolledUp}
 */
proto.penumbra.core.component.compact_block.v1alpha1.StatePayload.prototype.getRolledUp = function() {
  return /** @type{?proto.penumbra.core.component.compact_block.v1alpha1.StatePayload.RolledUp} */ (
    jspb.Message.getWrapperField(this, proto.penumbra.core.component.compact_block.v1alpha1.StatePayload.RolledUp, 1));
};


/**
 * @param {?proto.penumbra.core.component.compact_block.v1alpha1.StatePayload.RolledUp|undefined} value
 * @return {!proto.penumbra.core.component.compact_block.v1alpha1.StatePayload} returns this
*/
proto.penumbra.core.component.compact_block.v1alpha1.StatePayload.prototype.setRolledUp = function(value) {
  return jspb.Message.setOneofWrapperField(this, 1, proto.penumbra.core.component.compact_block.v1alpha1.StatePayload.oneofGroups_[0], value);
};


/**
 * Clears the message field making it undefined.
 * @return {!proto.penumbra.core.component.compact_block.v1alpha1.StatePayload} returns this
 */
proto.penumbra.core.component.compact_block.v1alpha1.StatePayload.prototype.clearRolledUp = function() {
  return this.setRolledUp(undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.penumbra.core.component.compact_block.v1alpha1.StatePayload.prototype.hasRolledUp = function() {
  return jspb.Message.getField(this, 1) != null;
};


/**
 * optional Note note = 2;
 * @return {?proto.penumbra.core.component.compact_block.v1alpha1.StatePayload.Note}
 */
proto.penumbra.core.component.compact_block.v1alpha1.StatePayload.prototype.getNote = function() {
  return /** @type{?proto.penumbra.core.component.compact_block.v1alpha1.StatePayload.Note} */ (
    jspb.Message.getWrapperField(this, proto.penumbra.core.component.compact_block.v1alpha1.StatePayload.Note, 2));
};


/**
 * @param {?proto.penumbra.core.component.compact_block.v1alpha1.StatePayload.Note|undefined} value
 * @return {!proto.penumbra.core.component.compact_block.v1alpha1.StatePayload} returns this
*/
proto.penumbra.core.component.compact_block.v1alpha1.StatePayload.prototype.setNote = function(value) {
  return jspb.Message.setOneofWrapperField(this, 2, proto.penumbra.core.component.compact_block.v1alpha1.StatePayload.oneofGroups_[0], value);
};


/**
 * Clears the message field making it undefined.
 * @return {!proto.penumbra.core.component.compact_block.v1alpha1.StatePayload} returns this
 */
proto.penumbra.core.component.compact_block.v1alpha1.StatePayload.prototype.clearNote = function() {
  return this.setNote(undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.penumbra.core.component.compact_block.v1alpha1.StatePayload.prototype.hasNote = function() {
  return jspb.Message.getField(this, 2) != null;
};


/**
 * optional Swap swap = 3;
 * @return {?proto.penumbra.core.component.compact_block.v1alpha1.StatePayload.Swap}
 */
proto.penumbra.core.component.compact_block.v1alpha1.StatePayload.prototype.getSwap = function() {
  return /** @type{?proto.penumbra.core.component.compact_block.v1alpha1.StatePayload.Swap} */ (
    jspb.Message.getWrapperField(this, proto.penumbra.core.component.compact_block.v1alpha1.StatePayload.Swap, 3));
};


/**
 * @param {?proto.penumbra.core.component.compact_block.v1alpha1.StatePayload.Swap|undefined} value
 * @return {!proto.penumbra.core.component.compact_block.v1alpha1.StatePayload} returns this
*/
proto.penumbra.core.component.compact_block.v1alpha1.StatePayload.prototype.setSwap = function(value) {
  return jspb.Message.setOneofWrapperField(this, 3, proto.penumbra.core.component.compact_block.v1alpha1.StatePayload.oneofGroups_[0], value);
};


/**
 * Clears the message field making it undefined.
 * @return {!proto.penumbra.core.component.compact_block.v1alpha1.StatePayload} returns this
 */
proto.penumbra.core.component.compact_block.v1alpha1.StatePayload.prototype.clearSwap = function() {
  return this.setSwap(undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.penumbra.core.component.compact_block.v1alpha1.StatePayload.prototype.hasSwap = function() {
  return jspb.Message.getField(this, 3) != null;
};





if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.penumbra.core.component.compact_block.v1alpha1.CompactBlockRangeRequest.prototype.toObject = function(opt_includeInstance) {
  return proto.penumbra.core.component.compact_block.v1alpha1.CompactBlockRangeRequest.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.penumbra.core.component.compact_block.v1alpha1.CompactBlockRangeRequest} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.penumbra.core.component.compact_block.v1alpha1.CompactBlockRangeRequest.toObject = function(includeInstance, msg) {
  var f, obj = {
    chainId: jspb.Message.getFieldWithDefault(msg, 1, ""),
    startHeight: jspb.Message.getFieldWithDefault(msg, 2, 0),
    endHeight: jspb.Message.getFieldWithDefault(msg, 3, 0),
    keepAlive: jspb.Message.getBooleanFieldWithDefault(msg, 4, false)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.penumbra.core.component.compact_block.v1alpha1.CompactBlockRangeRequest}
 */
proto.penumbra.core.component.compact_block.v1alpha1.CompactBlockRangeRequest.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.penumbra.core.component.compact_block.v1alpha1.CompactBlockRangeRequest;
  return proto.penumbra.core.component.compact_block.v1alpha1.CompactBlockRangeRequest.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.penumbra.core.component.compact_block.v1alpha1.CompactBlockRangeRequest} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.penumbra.core.component.compact_block.v1alpha1.CompactBlockRangeRequest}
 */
proto.penumbra.core.component.compact_block.v1alpha1.CompactBlockRangeRequest.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {string} */ (reader.readString());
      msg.setChainId(value);
      break;
    case 2:
      var value = /** @type {number} */ (reader.readUint64());
      msg.setStartHeight(value);
      break;
    case 3:
      var value = /** @type {number} */ (reader.readUint64());
      msg.setEndHeight(value);
      break;
    case 4:
      var value = /** @type {boolean} */ (reader.readBool());
      msg.setKeepAlive(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.penumbra.core.component.compact_block.v1alpha1.CompactBlockRangeRequest.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.penumbra.core.component.compact_block.v1alpha1.CompactBlockRangeRequest.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.penumbra.core.component.compact_block.v1alpha1.CompactBlockRangeRequest} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.penumbra.core.component.compact_block.v1alpha1.CompactBlockRangeRequest.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getChainId();
  if (f.length > 0) {
    writer.writeString(
      1,
      f
    );
  }
  f = message.getStartHeight();
  if (f !== 0) {
    writer.writeUint64(
      2,
      f
    );
  }
  f = message.getEndHeight();
  if (f !== 0) {
    writer.writeUint64(
      3,
      f
    );
  }
  f = message.getKeepAlive();
  if (f) {
    writer.writeBool(
      4,
      f
    );
  }
};


/**
 * optional string chain_id = 1;
 * @return {string}
 */
proto.penumbra.core.component.compact_block.v1alpha1.CompactBlockRangeRequest.prototype.getChainId = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 1, ""));
};


/**
 * @param {string} value
 * @return {!proto.penumbra.core.component.compact_block.v1alpha1.CompactBlockRangeRequest} returns this
 */
proto.penumbra.core.component.compact_block.v1alpha1.CompactBlockRangeRequest.prototype.setChainId = function(value) {
  return jspb.Message.setProto3StringField(this, 1, value);
};


/**
 * optional uint64 start_height = 2;
 * @return {number}
 */
proto.penumbra.core.component.compact_block.v1alpha1.CompactBlockRangeRequest.prototype.getStartHeight = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 2, 0));
};


/**
 * @param {number} value
 * @return {!proto.penumbra.core.component.compact_block.v1alpha1.CompactBlockRangeRequest} returns this
 */
proto.penumbra.core.component.compact_block.v1alpha1.CompactBlockRangeRequest.prototype.setStartHeight = function(value) {
  return jspb.Message.setProto3IntField(this, 2, value);
};


/**
 * optional uint64 end_height = 3;
 * @return {number}
 */
proto.penumbra.core.component.compact_block.v1alpha1.CompactBlockRangeRequest.prototype.getEndHeight = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 3, 0));
};


/**
 * @param {number} value
 * @return {!proto.penumbra.core.component.compact_block.v1alpha1.CompactBlockRangeRequest} returns this
 */
proto.penumbra.core.component.compact_block.v1alpha1.CompactBlockRangeRequest.prototype.setEndHeight = function(value) {
  return jspb.Message.setProto3IntField(this, 3, value);
};


/**
 * optional bool keep_alive = 4;
 * @return {boolean}
 */
proto.penumbra.core.component.compact_block.v1alpha1.CompactBlockRangeRequest.prototype.getKeepAlive = function() {
  return /** @type {boolean} */ (jspb.Message.getBooleanFieldWithDefault(this, 4, false));
};


/**
 * @param {boolean} value
 * @return {!proto.penumbra.core.component.compact_block.v1alpha1.CompactBlockRangeRequest} returns this
 */
proto.penumbra.core.component.compact_block.v1alpha1.CompactBlockRangeRequest.prototype.setKeepAlive = function(value) {
  return jspb.Message.setProto3BooleanField(this, 4, value);
};





if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.penumbra.core.component.compact_block.v1alpha1.CompactBlockRangeResponse.prototype.toObject = function(opt_includeInstance) {
  return proto.penumbra.core.component.compact_block.v1alpha1.CompactBlockRangeResponse.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.penumbra.core.component.compact_block.v1alpha1.CompactBlockRangeResponse} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.penumbra.core.component.compact_block.v1alpha1.CompactBlockRangeResponse.toObject = function(includeInstance, msg) {
  var f, obj = {
    compactBlock: (f = msg.getCompactBlock()) && proto.penumbra.core.component.compact_block.v1alpha1.CompactBlock.toObject(includeInstance, f)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.penumbra.core.component.compact_block.v1alpha1.CompactBlockRangeResponse}
 */
proto.penumbra.core.component.compact_block.v1alpha1.CompactBlockRangeResponse.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.penumbra.core.component.compact_block.v1alpha1.CompactBlockRangeResponse;
  return proto.penumbra.core.component.compact_block.v1alpha1.CompactBlockRangeResponse.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.penumbra.core.component.compact_block.v1alpha1.CompactBlockRangeResponse} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.penumbra.core.component.compact_block.v1alpha1.CompactBlockRangeResponse}
 */
proto.penumbra.core.component.compact_block.v1alpha1.CompactBlockRangeResponse.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = new proto.penumbra.core.component.compact_block.v1alpha1.CompactBlock;
      reader.readMessage(value,proto.penumbra.core.component.compact_block.v1alpha1.CompactBlock.deserializeBinaryFromReader);
      msg.setCompactBlock(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.penumbra.core.component.compact_block.v1alpha1.CompactBlockRangeResponse.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.penumbra.core.component.compact_block.v1alpha1.CompactBlockRangeResponse.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.penumbra.core.component.compact_block.v1alpha1.CompactBlockRangeResponse} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.penumbra.core.component.compact_block.v1alpha1.CompactBlockRangeResponse.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getCompactBlock();
  if (f != null) {
    writer.writeMessage(
      1,
      f,
      proto.penumbra.core.component.compact_block.v1alpha1.CompactBlock.serializeBinaryToWriter
    );
  }
};


/**
 * optional CompactBlock compact_block = 1;
 * @return {?proto.penumbra.core.component.compact_block.v1alpha1.CompactBlock}
 */
proto.penumbra.core.component.compact_block.v1alpha1.CompactBlockRangeResponse.prototype.getCompactBlock = function() {
  return /** @type{?proto.penumbra.core.component.compact_block.v1alpha1.CompactBlock} */ (
    jspb.Message.getWrapperField(this, proto.penumbra.core.component.compact_block.v1alpha1.CompactBlock, 1));
};


/**
 * @param {?proto.penumbra.core.component.compact_block.v1alpha1.CompactBlock|undefined} value
 * @return {!proto.penumbra.core.component.compact_block.v1alpha1.CompactBlockRangeResponse} returns this
*/
proto.penumbra.core.component.compact_block.v1alpha1.CompactBlockRangeResponse.prototype.setCompactBlock = function(value) {
  return jspb.Message.setWrapperField(this, 1, value);
};


/**
 * Clears the message field making it undefined.
 * @return {!proto.penumbra.core.component.compact_block.v1alpha1.CompactBlockRangeResponse} returns this
 */
proto.penumbra.core.component.compact_block.v1alpha1.CompactBlockRangeResponse.prototype.clearCompactBlock = function() {
  return this.setCompactBlock(undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.penumbra.core.component.compact_block.v1alpha1.CompactBlockRangeResponse.prototype.hasCompactBlock = function() {
  return jspb.Message.getField(this, 1) != null;
};


goog.object.extend(exports, proto.penumbra.core.component.compact_block.v1alpha1);
