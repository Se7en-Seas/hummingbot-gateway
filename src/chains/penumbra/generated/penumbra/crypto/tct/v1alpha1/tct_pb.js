// source: penumbra/crypto/tct/v1alpha1/tct.proto
/**
 * @fileoverview
 * @enhanceable
 * @suppress {missingRequire} reports error on implicit type usages.
 * @suppress {messageConventions} JS Compiler reports an error if a variable or
 *     field starts with 'MSG_' and isn't a translatable message.
 * @public
 */
// GENERATED CODE -- DO NOT EDIT!
/* eslint-disable */
// @ts-nocheck

var jspb = require('google-protobuf');
var goog = jspb;
var global = (function() {
  if (this) { return this; }
  if (typeof window !== 'undefined') { return window; }
  if (typeof global !== 'undefined') { return global; }
  if (typeof self !== 'undefined') { return self; }
  return Function('return this')();
}.call(null));

goog.exportSymbol('proto.penumbra.crypto.tct.v1alpha1.MerklePathChunk', null, global);
goog.exportSymbol('proto.penumbra.crypto.tct.v1alpha1.MerkleRoot', null, global);
goog.exportSymbol('proto.penumbra.crypto.tct.v1alpha1.StateCommitment', null, global);
goog.exportSymbol('proto.penumbra.crypto.tct.v1alpha1.StateCommitmentProof', null, global);
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.penumbra.crypto.tct.v1alpha1.StateCommitment = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.penumbra.crypto.tct.v1alpha1.StateCommitment, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.penumbra.crypto.tct.v1alpha1.StateCommitment.displayName = 'proto.penumbra.crypto.tct.v1alpha1.StateCommitment';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.penumbra.crypto.tct.v1alpha1.MerkleRoot = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.penumbra.crypto.tct.v1alpha1.MerkleRoot, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.penumbra.crypto.tct.v1alpha1.MerkleRoot.displayName = 'proto.penumbra.crypto.tct.v1alpha1.MerkleRoot';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.penumbra.crypto.tct.v1alpha1.StateCommitmentProof = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, proto.penumbra.crypto.tct.v1alpha1.StateCommitmentProof.repeatedFields_, null);
};
goog.inherits(proto.penumbra.crypto.tct.v1alpha1.StateCommitmentProof, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.penumbra.crypto.tct.v1alpha1.StateCommitmentProof.displayName = 'proto.penumbra.crypto.tct.v1alpha1.StateCommitmentProof';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.penumbra.crypto.tct.v1alpha1.MerklePathChunk = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.penumbra.crypto.tct.v1alpha1.MerklePathChunk, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.penumbra.crypto.tct.v1alpha1.MerklePathChunk.displayName = 'proto.penumbra.crypto.tct.v1alpha1.MerklePathChunk';
}



if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.penumbra.crypto.tct.v1alpha1.StateCommitment.prototype.toObject = function(opt_includeInstance) {
  return proto.penumbra.crypto.tct.v1alpha1.StateCommitment.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.penumbra.crypto.tct.v1alpha1.StateCommitment} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.penumbra.crypto.tct.v1alpha1.StateCommitment.toObject = function(includeInstance, msg) {
  var f, obj = {
    inner: msg.getInner_asB64()
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.penumbra.crypto.tct.v1alpha1.StateCommitment}
 */
proto.penumbra.crypto.tct.v1alpha1.StateCommitment.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.penumbra.crypto.tct.v1alpha1.StateCommitment;
  return proto.penumbra.crypto.tct.v1alpha1.StateCommitment.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.penumbra.crypto.tct.v1alpha1.StateCommitment} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.penumbra.crypto.tct.v1alpha1.StateCommitment}
 */
proto.penumbra.crypto.tct.v1alpha1.StateCommitment.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {!Uint8Array} */ (reader.readBytes());
      msg.setInner(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.penumbra.crypto.tct.v1alpha1.StateCommitment.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.penumbra.crypto.tct.v1alpha1.StateCommitment.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.penumbra.crypto.tct.v1alpha1.StateCommitment} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.penumbra.crypto.tct.v1alpha1.StateCommitment.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getInner_asU8();
  if (f.length > 0) {
    writer.writeBytes(
      1,
      f
    );
  }
};


/**
 * optional bytes inner = 1;
 * @return {!(string|Uint8Array)}
 */
proto.penumbra.crypto.tct.v1alpha1.StateCommitment.prototype.getInner = function() {
  return /** @type {!(string|Uint8Array)} */ (jspb.Message.getFieldWithDefault(this, 1, ""));
};


/**
 * optional bytes inner = 1;
 * This is a type-conversion wrapper around `getInner()`
 * @return {string}
 */
proto.penumbra.crypto.tct.v1alpha1.StateCommitment.prototype.getInner_asB64 = function() {
  return /** @type {string} */ (jspb.Message.bytesAsB64(
      this.getInner()));
};


/**
 * optional bytes inner = 1;
 * Note that Uint8Array is not supported on all browsers.
 * @see http://caniuse.com/Uint8Array
 * This is a type-conversion wrapper around `getInner()`
 * @return {!Uint8Array}
 */
proto.penumbra.crypto.tct.v1alpha1.StateCommitment.prototype.getInner_asU8 = function() {
  return /** @type {!Uint8Array} */ (jspb.Message.bytesAsU8(
      this.getInner()));
};


/**
 * @param {!(string|Uint8Array)} value
 * @return {!proto.penumbra.crypto.tct.v1alpha1.StateCommitment} returns this
 */
proto.penumbra.crypto.tct.v1alpha1.StateCommitment.prototype.setInner = function(value) {
  return jspb.Message.setProto3BytesField(this, 1, value);
};





if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.penumbra.crypto.tct.v1alpha1.MerkleRoot.prototype.toObject = function(opt_includeInstance) {
  return proto.penumbra.crypto.tct.v1alpha1.MerkleRoot.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.penumbra.crypto.tct.v1alpha1.MerkleRoot} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.penumbra.crypto.tct.v1alpha1.MerkleRoot.toObject = function(includeInstance, msg) {
  var f, obj = {
    inner: msg.getInner_asB64()
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.penumbra.crypto.tct.v1alpha1.MerkleRoot}
 */
proto.penumbra.crypto.tct.v1alpha1.MerkleRoot.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.penumbra.crypto.tct.v1alpha1.MerkleRoot;
  return proto.penumbra.crypto.tct.v1alpha1.MerkleRoot.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.penumbra.crypto.tct.v1alpha1.MerkleRoot} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.penumbra.crypto.tct.v1alpha1.MerkleRoot}
 */
proto.penumbra.crypto.tct.v1alpha1.MerkleRoot.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {!Uint8Array} */ (reader.readBytes());
      msg.setInner(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.penumbra.crypto.tct.v1alpha1.MerkleRoot.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.penumbra.crypto.tct.v1alpha1.MerkleRoot.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.penumbra.crypto.tct.v1alpha1.MerkleRoot} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.penumbra.crypto.tct.v1alpha1.MerkleRoot.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getInner_asU8();
  if (f.length > 0) {
    writer.writeBytes(
      1,
      f
    );
  }
};


/**
 * optional bytes inner = 1;
 * @return {!(string|Uint8Array)}
 */
proto.penumbra.crypto.tct.v1alpha1.MerkleRoot.prototype.getInner = function() {
  return /** @type {!(string|Uint8Array)} */ (jspb.Message.getFieldWithDefault(this, 1, ""));
};


/**
 * optional bytes inner = 1;
 * This is a type-conversion wrapper around `getInner()`
 * @return {string}
 */
proto.penumbra.crypto.tct.v1alpha1.MerkleRoot.prototype.getInner_asB64 = function() {
  return /** @type {string} */ (jspb.Message.bytesAsB64(
      this.getInner()));
};


/**
 * optional bytes inner = 1;
 * Note that Uint8Array is not supported on all browsers.
 * @see http://caniuse.com/Uint8Array
 * This is a type-conversion wrapper around `getInner()`
 * @return {!Uint8Array}
 */
proto.penumbra.crypto.tct.v1alpha1.MerkleRoot.prototype.getInner_asU8 = function() {
  return /** @type {!Uint8Array} */ (jspb.Message.bytesAsU8(
      this.getInner()));
};


/**
 * @param {!(string|Uint8Array)} value
 * @return {!proto.penumbra.crypto.tct.v1alpha1.MerkleRoot} returns this
 */
proto.penumbra.crypto.tct.v1alpha1.MerkleRoot.prototype.setInner = function(value) {
  return jspb.Message.setProto3BytesField(this, 1, value);
};



/**
 * List of repeated fields within this message type.
 * @private {!Array<number>}
 * @const
 */
proto.penumbra.crypto.tct.v1alpha1.StateCommitmentProof.repeatedFields_ = [3];



if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.penumbra.crypto.tct.v1alpha1.StateCommitmentProof.prototype.toObject = function(opt_includeInstance) {
  return proto.penumbra.crypto.tct.v1alpha1.StateCommitmentProof.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.penumbra.crypto.tct.v1alpha1.StateCommitmentProof} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.penumbra.crypto.tct.v1alpha1.StateCommitmentProof.toObject = function(includeInstance, msg) {
  var f, obj = {
    noteCommitment: (f = msg.getNoteCommitment()) && proto.penumbra.crypto.tct.v1alpha1.StateCommitment.toObject(includeInstance, f),
    position: jspb.Message.getFieldWithDefault(msg, 2, 0),
    authPathList: jspb.Message.toObjectList(msg.getAuthPathList(),
    proto.penumbra.crypto.tct.v1alpha1.MerklePathChunk.toObject, includeInstance)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.penumbra.crypto.tct.v1alpha1.StateCommitmentProof}
 */
proto.penumbra.crypto.tct.v1alpha1.StateCommitmentProof.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.penumbra.crypto.tct.v1alpha1.StateCommitmentProof;
  return proto.penumbra.crypto.tct.v1alpha1.StateCommitmentProof.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.penumbra.crypto.tct.v1alpha1.StateCommitmentProof} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.penumbra.crypto.tct.v1alpha1.StateCommitmentProof}
 */
proto.penumbra.crypto.tct.v1alpha1.StateCommitmentProof.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = new proto.penumbra.crypto.tct.v1alpha1.StateCommitment;
      reader.readMessage(value,proto.penumbra.crypto.tct.v1alpha1.StateCommitment.deserializeBinaryFromReader);
      msg.setNoteCommitment(value);
      break;
    case 2:
      var value = /** @type {number} */ (reader.readUint64());
      msg.setPosition(value);
      break;
    case 3:
      var value = new proto.penumbra.crypto.tct.v1alpha1.MerklePathChunk;
      reader.readMessage(value,proto.penumbra.crypto.tct.v1alpha1.MerklePathChunk.deserializeBinaryFromReader);
      msg.addAuthPath(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.penumbra.crypto.tct.v1alpha1.StateCommitmentProof.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.penumbra.crypto.tct.v1alpha1.StateCommitmentProof.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.penumbra.crypto.tct.v1alpha1.StateCommitmentProof} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.penumbra.crypto.tct.v1alpha1.StateCommitmentProof.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getNoteCommitment();
  if (f != null) {
    writer.writeMessage(
      1,
      f,
      proto.penumbra.crypto.tct.v1alpha1.StateCommitment.serializeBinaryToWriter
    );
  }
  f = message.getPosition();
  if (f !== 0) {
    writer.writeUint64(
      2,
      f
    );
  }
  f = message.getAuthPathList();
  if (f.length > 0) {
    writer.writeRepeatedMessage(
      3,
      f,
      proto.penumbra.crypto.tct.v1alpha1.MerklePathChunk.serializeBinaryToWriter
    );
  }
};


/**
 * optional StateCommitment note_commitment = 1;
 * @return {?proto.penumbra.crypto.tct.v1alpha1.StateCommitment}
 */
proto.penumbra.crypto.tct.v1alpha1.StateCommitmentProof.prototype.getNoteCommitment = function() {
  return /** @type{?proto.penumbra.crypto.tct.v1alpha1.StateCommitment} */ (
    jspb.Message.getWrapperField(this, proto.penumbra.crypto.tct.v1alpha1.StateCommitment, 1));
};


/**
 * @param {?proto.penumbra.crypto.tct.v1alpha1.StateCommitment|undefined} value
 * @return {!proto.penumbra.crypto.tct.v1alpha1.StateCommitmentProof} returns this
*/
proto.penumbra.crypto.tct.v1alpha1.StateCommitmentProof.prototype.setNoteCommitment = function(value) {
  return jspb.Message.setWrapperField(this, 1, value);
};


/**
 * Clears the message field making it undefined.
 * @return {!proto.penumbra.crypto.tct.v1alpha1.StateCommitmentProof} returns this
 */
proto.penumbra.crypto.tct.v1alpha1.StateCommitmentProof.prototype.clearNoteCommitment = function() {
  return this.setNoteCommitment(undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.penumbra.crypto.tct.v1alpha1.StateCommitmentProof.prototype.hasNoteCommitment = function() {
  return jspb.Message.getField(this, 1) != null;
};


/**
 * optional uint64 position = 2;
 * @return {number}
 */
proto.penumbra.crypto.tct.v1alpha1.StateCommitmentProof.prototype.getPosition = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 2, 0));
};


/**
 * @param {number} value
 * @return {!proto.penumbra.crypto.tct.v1alpha1.StateCommitmentProof} returns this
 */
proto.penumbra.crypto.tct.v1alpha1.StateCommitmentProof.prototype.setPosition = function(value) {
  return jspb.Message.setProto3IntField(this, 2, value);
};


/**
 * repeated MerklePathChunk auth_path = 3;
 * @return {!Array<!proto.penumbra.crypto.tct.v1alpha1.MerklePathChunk>}
 */
proto.penumbra.crypto.tct.v1alpha1.StateCommitmentProof.prototype.getAuthPathList = function() {
  return /** @type{!Array<!proto.penumbra.crypto.tct.v1alpha1.MerklePathChunk>} */ (
    jspb.Message.getRepeatedWrapperField(this, proto.penumbra.crypto.tct.v1alpha1.MerklePathChunk, 3));
};


/**
 * @param {!Array<!proto.penumbra.crypto.tct.v1alpha1.MerklePathChunk>} value
 * @return {!proto.penumbra.crypto.tct.v1alpha1.StateCommitmentProof} returns this
*/
proto.penumbra.crypto.tct.v1alpha1.StateCommitmentProof.prototype.setAuthPathList = function(value) {
  return jspb.Message.setRepeatedWrapperField(this, 3, value);
};


/**
 * @param {!proto.penumbra.crypto.tct.v1alpha1.MerklePathChunk=} opt_value
 * @param {number=} opt_index
 * @return {!proto.penumbra.crypto.tct.v1alpha1.MerklePathChunk}
 */
proto.penumbra.crypto.tct.v1alpha1.StateCommitmentProof.prototype.addAuthPath = function(opt_value, opt_index) {
  return jspb.Message.addToRepeatedWrapperField(this, 3, opt_value, proto.penumbra.crypto.tct.v1alpha1.MerklePathChunk, opt_index);
};


/**
 * Clears the list making it empty but non-null.
 * @return {!proto.penumbra.crypto.tct.v1alpha1.StateCommitmentProof} returns this
 */
proto.penumbra.crypto.tct.v1alpha1.StateCommitmentProof.prototype.clearAuthPathList = function() {
  return this.setAuthPathList([]);
};





if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.penumbra.crypto.tct.v1alpha1.MerklePathChunk.prototype.toObject = function(opt_includeInstance) {
  return proto.penumbra.crypto.tct.v1alpha1.MerklePathChunk.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.penumbra.crypto.tct.v1alpha1.MerklePathChunk} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.penumbra.crypto.tct.v1alpha1.MerklePathChunk.toObject = function(includeInstance, msg) {
  var f, obj = {
    sibling1: msg.getSibling1_asB64(),
    sibling2: msg.getSibling2_asB64(),
    sibling3: msg.getSibling3_asB64()
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.penumbra.crypto.tct.v1alpha1.MerklePathChunk}
 */
proto.penumbra.crypto.tct.v1alpha1.MerklePathChunk.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.penumbra.crypto.tct.v1alpha1.MerklePathChunk;
  return proto.penumbra.crypto.tct.v1alpha1.MerklePathChunk.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.penumbra.crypto.tct.v1alpha1.MerklePathChunk} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.penumbra.crypto.tct.v1alpha1.MerklePathChunk}
 */
proto.penumbra.crypto.tct.v1alpha1.MerklePathChunk.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {!Uint8Array} */ (reader.readBytes());
      msg.setSibling1(value);
      break;
    case 2:
      var value = /** @type {!Uint8Array} */ (reader.readBytes());
      msg.setSibling2(value);
      break;
    case 3:
      var value = /** @type {!Uint8Array} */ (reader.readBytes());
      msg.setSibling3(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.penumbra.crypto.tct.v1alpha1.MerklePathChunk.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.penumbra.crypto.tct.v1alpha1.MerklePathChunk.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.penumbra.crypto.tct.v1alpha1.MerklePathChunk} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.penumbra.crypto.tct.v1alpha1.MerklePathChunk.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getSibling1_asU8();
  if (f.length > 0) {
    writer.writeBytes(
      1,
      f
    );
  }
  f = message.getSibling2_asU8();
  if (f.length > 0) {
    writer.writeBytes(
      2,
      f
    );
  }
  f = message.getSibling3_asU8();
  if (f.length > 0) {
    writer.writeBytes(
      3,
      f
    );
  }
};


/**
 * optional bytes sibling_1 = 1;
 * @return {!(string|Uint8Array)}
 */
proto.penumbra.crypto.tct.v1alpha1.MerklePathChunk.prototype.getSibling1 = function() {
  return /** @type {!(string|Uint8Array)} */ (jspb.Message.getFieldWithDefault(this, 1, ""));
};


/**
 * optional bytes sibling_1 = 1;
 * This is a type-conversion wrapper around `getSibling1()`
 * @return {string}
 */
proto.penumbra.crypto.tct.v1alpha1.MerklePathChunk.prototype.getSibling1_asB64 = function() {
  return /** @type {string} */ (jspb.Message.bytesAsB64(
      this.getSibling1()));
};


/**
 * optional bytes sibling_1 = 1;
 * Note that Uint8Array is not supported on all browsers.
 * @see http://caniuse.com/Uint8Array
 * This is a type-conversion wrapper around `getSibling1()`
 * @return {!Uint8Array}
 */
proto.penumbra.crypto.tct.v1alpha1.MerklePathChunk.prototype.getSibling1_asU8 = function() {
  return /** @type {!Uint8Array} */ (jspb.Message.bytesAsU8(
      this.getSibling1()));
};


/**
 * @param {!(string|Uint8Array)} value
 * @return {!proto.penumbra.crypto.tct.v1alpha1.MerklePathChunk} returns this
 */
proto.penumbra.crypto.tct.v1alpha1.MerklePathChunk.prototype.setSibling1 = function(value) {
  return jspb.Message.setProto3BytesField(this, 1, value);
};


/**
 * optional bytes sibling_2 = 2;
 * @return {!(string|Uint8Array)}
 */
proto.penumbra.crypto.tct.v1alpha1.MerklePathChunk.prototype.getSibling2 = function() {
  return /** @type {!(string|Uint8Array)} */ (jspb.Message.getFieldWithDefault(this, 2, ""));
};


/**
 * optional bytes sibling_2 = 2;
 * This is a type-conversion wrapper around `getSibling2()`
 * @return {string}
 */
proto.penumbra.crypto.tct.v1alpha1.MerklePathChunk.prototype.getSibling2_asB64 = function() {
  return /** @type {string} */ (jspb.Message.bytesAsB64(
      this.getSibling2()));
};


/**
 * optional bytes sibling_2 = 2;
 * Note that Uint8Array is not supported on all browsers.
 * @see http://caniuse.com/Uint8Array
 * This is a type-conversion wrapper around `getSibling2()`
 * @return {!Uint8Array}
 */
proto.penumbra.crypto.tct.v1alpha1.MerklePathChunk.prototype.getSibling2_asU8 = function() {
  return /** @type {!Uint8Array} */ (jspb.Message.bytesAsU8(
      this.getSibling2()));
};


/**
 * @param {!(string|Uint8Array)} value
 * @return {!proto.penumbra.crypto.tct.v1alpha1.MerklePathChunk} returns this
 */
proto.penumbra.crypto.tct.v1alpha1.MerklePathChunk.prototype.setSibling2 = function(value) {
  return jspb.Message.setProto3BytesField(this, 2, value);
};


/**
 * optional bytes sibling_3 = 3;
 * @return {!(string|Uint8Array)}
 */
proto.penumbra.crypto.tct.v1alpha1.MerklePathChunk.prototype.getSibling3 = function() {
  return /** @type {!(string|Uint8Array)} */ (jspb.Message.getFieldWithDefault(this, 3, ""));
};


/**
 * optional bytes sibling_3 = 3;
 * This is a type-conversion wrapper around `getSibling3()`
 * @return {string}
 */
proto.penumbra.crypto.tct.v1alpha1.MerklePathChunk.prototype.getSibling3_asB64 = function() {
  return /** @type {string} */ (jspb.Message.bytesAsB64(
      this.getSibling3()));
};


/**
 * optional bytes sibling_3 = 3;
 * Note that Uint8Array is not supported on all browsers.
 * @see http://caniuse.com/Uint8Array
 * This is a type-conversion wrapper around `getSibling3()`
 * @return {!Uint8Array}
 */
proto.penumbra.crypto.tct.v1alpha1.MerklePathChunk.prototype.getSibling3_asU8 = function() {
  return /** @type {!Uint8Array} */ (jspb.Message.bytesAsU8(
      this.getSibling3()));
};


/**
 * @param {!(string|Uint8Array)} value
 * @return {!proto.penumbra.crypto.tct.v1alpha1.MerklePathChunk} returns this
 */
proto.penumbra.crypto.tct.v1alpha1.MerklePathChunk.prototype.setSibling3 = function(value) {
  return jspb.Message.setProto3BytesField(this, 3, value);
};


goog.object.extend(exports, proto.penumbra.crypto.tct.v1alpha1);
