// source: penumbra/tools/summoning/v1alpha1/summoning.proto
/**
 * @fileoverview
 * @enhanceable
 * @suppress {missingRequire} reports error on implicit type usages.
 * @suppress {messageConventions} JS Compiler reports an error if a variable or
 *     field starts with 'MSG_' and isn't a translatable message.
 * @public
 */
// GENERATED CODE -- DO NOT EDIT!
/* eslint-disable */
// @ts-nocheck

var jspb = require('google-protobuf');
var goog = jspb;
var global = (function() {
  if (this) { return this; }
  if (typeof window !== 'undefined') { return window; }
  if (typeof global !== 'undefined') { return global; }
  if (typeof self !== 'undefined') { return self; }
  return Function('return this')();
}.call(null));

var penumbra_core_keys_v1alpha1_keys_pb = require('../../../../penumbra/core/keys/v1alpha1/keys_pb.js');
goog.object.extend(proto, penumbra_core_keys_v1alpha1_keys_pb);
var penumbra_core_num_v1alpha1_num_pb = require('../../../../penumbra/core/num/v1alpha1/num_pb.js');
goog.object.extend(proto, penumbra_core_num_v1alpha1_num_pb);
goog.exportSymbol('proto.penumbra.tools.summoning.v1alpha1.CeremonyCrs', null, global);
goog.exportSymbol('proto.penumbra.tools.summoning.v1alpha1.CeremonyLinkingProof', null, global);
goog.exportSymbol('proto.penumbra.tools.summoning.v1alpha1.CeremonyParentHashes', null, global);
goog.exportSymbol('proto.penumbra.tools.summoning.v1alpha1.ParticipateRequest', null, global);
goog.exportSymbol('proto.penumbra.tools.summoning.v1alpha1.ParticipateRequest.Contribution', null, global);
goog.exportSymbol('proto.penumbra.tools.summoning.v1alpha1.ParticipateRequest.Identify', null, global);
goog.exportSymbol('proto.penumbra.tools.summoning.v1alpha1.ParticipateRequest.MsgCase', null, global);
goog.exportSymbol('proto.penumbra.tools.summoning.v1alpha1.ParticipateResponse', null, global);
goog.exportSymbol('proto.penumbra.tools.summoning.v1alpha1.ParticipateResponse.Confirm', null, global);
goog.exportSymbol('proto.penumbra.tools.summoning.v1alpha1.ParticipateResponse.ContributeNow', null, global);
goog.exportSymbol('proto.penumbra.tools.summoning.v1alpha1.ParticipateResponse.MsgCase', null, global);
goog.exportSymbol('proto.penumbra.tools.summoning.v1alpha1.ParticipateResponse.Position', null, global);
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.penumbra.tools.summoning.v1alpha1.ParticipateRequest = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, proto.penumbra.tools.summoning.v1alpha1.ParticipateRequest.oneofGroups_);
};
goog.inherits(proto.penumbra.tools.summoning.v1alpha1.ParticipateRequest, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.penumbra.tools.summoning.v1alpha1.ParticipateRequest.displayName = 'proto.penumbra.tools.summoning.v1alpha1.ParticipateRequest';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.penumbra.tools.summoning.v1alpha1.ParticipateRequest.Identify = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.penumbra.tools.summoning.v1alpha1.ParticipateRequest.Identify, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.penumbra.tools.summoning.v1alpha1.ParticipateRequest.Identify.displayName = 'proto.penumbra.tools.summoning.v1alpha1.ParticipateRequest.Identify';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.penumbra.tools.summoning.v1alpha1.ParticipateRequest.Contribution = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.penumbra.tools.summoning.v1alpha1.ParticipateRequest.Contribution, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.penumbra.tools.summoning.v1alpha1.ParticipateRequest.Contribution.displayName = 'proto.penumbra.tools.summoning.v1alpha1.ParticipateRequest.Contribution';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.penumbra.tools.summoning.v1alpha1.CeremonyCrs = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.penumbra.tools.summoning.v1alpha1.CeremonyCrs, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.penumbra.tools.summoning.v1alpha1.CeremonyCrs.displayName = 'proto.penumbra.tools.summoning.v1alpha1.CeremonyCrs';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.penumbra.tools.summoning.v1alpha1.CeremonyLinkingProof = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.penumbra.tools.summoning.v1alpha1.CeremonyLinkingProof, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.penumbra.tools.summoning.v1alpha1.CeremonyLinkingProof.displayName = 'proto.penumbra.tools.summoning.v1alpha1.CeremonyLinkingProof';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.penumbra.tools.summoning.v1alpha1.CeremonyParentHashes = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.penumbra.tools.summoning.v1alpha1.CeremonyParentHashes, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.penumbra.tools.summoning.v1alpha1.CeremonyParentHashes.displayName = 'proto.penumbra.tools.summoning.v1alpha1.CeremonyParentHashes';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.penumbra.tools.summoning.v1alpha1.ParticipateResponse = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, proto.penumbra.tools.summoning.v1alpha1.ParticipateResponse.oneofGroups_);
};
goog.inherits(proto.penumbra.tools.summoning.v1alpha1.ParticipateResponse, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.penumbra.tools.summoning.v1alpha1.ParticipateResponse.displayName = 'proto.penumbra.tools.summoning.v1alpha1.ParticipateResponse';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.penumbra.tools.summoning.v1alpha1.ParticipateResponse.Position = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.penumbra.tools.summoning.v1alpha1.ParticipateResponse.Position, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.penumbra.tools.summoning.v1alpha1.ParticipateResponse.Position.displayName = 'proto.penumbra.tools.summoning.v1alpha1.ParticipateResponse.Position';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.penumbra.tools.summoning.v1alpha1.ParticipateResponse.ContributeNow = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.penumbra.tools.summoning.v1alpha1.ParticipateResponse.ContributeNow, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.penumbra.tools.summoning.v1alpha1.ParticipateResponse.ContributeNow.displayName = 'proto.penumbra.tools.summoning.v1alpha1.ParticipateResponse.ContributeNow';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.penumbra.tools.summoning.v1alpha1.ParticipateResponse.Confirm = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.penumbra.tools.summoning.v1alpha1.ParticipateResponse.Confirm, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.penumbra.tools.summoning.v1alpha1.ParticipateResponse.Confirm.displayName = 'proto.penumbra.tools.summoning.v1alpha1.ParticipateResponse.Confirm';
}

/**
 * Oneof group definitions for this message. Each group defines the field
 * numbers belonging to that group. When of these fields' value is set, all
 * other fields in the group are cleared. During deserialization, if multiple
 * fields are encountered for a group, only the last value seen will be kept.
 * @private {!Array<!Array<number>>}
 * @const
 */
proto.penumbra.tools.summoning.v1alpha1.ParticipateRequest.oneofGroups_ = [[1,2]];

/**
 * @enum {number}
 */
proto.penumbra.tools.summoning.v1alpha1.ParticipateRequest.MsgCase = {
  MSG_NOT_SET: 0,
  IDENTIFY: 1,
  CONTRIBUTION: 2
};

/**
 * @return {proto.penumbra.tools.summoning.v1alpha1.ParticipateRequest.MsgCase}
 */
proto.penumbra.tools.summoning.v1alpha1.ParticipateRequest.prototype.getMsgCase = function() {
  return /** @type {proto.penumbra.tools.summoning.v1alpha1.ParticipateRequest.MsgCase} */(jspb.Message.computeOneofCase(this, proto.penumbra.tools.summoning.v1alpha1.ParticipateRequest.oneofGroups_[0]));
};



if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.penumbra.tools.summoning.v1alpha1.ParticipateRequest.prototype.toObject = function(opt_includeInstance) {
  return proto.penumbra.tools.summoning.v1alpha1.ParticipateRequest.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.penumbra.tools.summoning.v1alpha1.ParticipateRequest} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.penumbra.tools.summoning.v1alpha1.ParticipateRequest.toObject = function(includeInstance, msg) {
  var f, obj = {
    identify: (f = msg.getIdentify()) && proto.penumbra.tools.summoning.v1alpha1.ParticipateRequest.Identify.toObject(includeInstance, f),
    contribution: (f = msg.getContribution()) && proto.penumbra.tools.summoning.v1alpha1.ParticipateRequest.Contribution.toObject(includeInstance, f)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.penumbra.tools.summoning.v1alpha1.ParticipateRequest}
 */
proto.penumbra.tools.summoning.v1alpha1.ParticipateRequest.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.penumbra.tools.summoning.v1alpha1.ParticipateRequest;
  return proto.penumbra.tools.summoning.v1alpha1.ParticipateRequest.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.penumbra.tools.summoning.v1alpha1.ParticipateRequest} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.penumbra.tools.summoning.v1alpha1.ParticipateRequest}
 */
proto.penumbra.tools.summoning.v1alpha1.ParticipateRequest.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = new proto.penumbra.tools.summoning.v1alpha1.ParticipateRequest.Identify;
      reader.readMessage(value,proto.penumbra.tools.summoning.v1alpha1.ParticipateRequest.Identify.deserializeBinaryFromReader);
      msg.setIdentify(value);
      break;
    case 2:
      var value = new proto.penumbra.tools.summoning.v1alpha1.ParticipateRequest.Contribution;
      reader.readMessage(value,proto.penumbra.tools.summoning.v1alpha1.ParticipateRequest.Contribution.deserializeBinaryFromReader);
      msg.setContribution(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.penumbra.tools.summoning.v1alpha1.ParticipateRequest.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.penumbra.tools.summoning.v1alpha1.ParticipateRequest.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.penumbra.tools.summoning.v1alpha1.ParticipateRequest} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.penumbra.tools.summoning.v1alpha1.ParticipateRequest.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getIdentify();
  if (f != null) {
    writer.writeMessage(
      1,
      f,
      proto.penumbra.tools.summoning.v1alpha1.ParticipateRequest.Identify.serializeBinaryToWriter
    );
  }
  f = message.getContribution();
  if (f != null) {
    writer.writeMessage(
      2,
      f,
      proto.penumbra.tools.summoning.v1alpha1.ParticipateRequest.Contribution.serializeBinaryToWriter
    );
  }
};





if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.penumbra.tools.summoning.v1alpha1.ParticipateRequest.Identify.prototype.toObject = function(opt_includeInstance) {
  return proto.penumbra.tools.summoning.v1alpha1.ParticipateRequest.Identify.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.penumbra.tools.summoning.v1alpha1.ParticipateRequest.Identify} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.penumbra.tools.summoning.v1alpha1.ParticipateRequest.Identify.toObject = function(includeInstance, msg) {
  var f, obj = {
    address: (f = msg.getAddress()) && penumbra_core_keys_v1alpha1_keys_pb.Address.toObject(includeInstance, f)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.penumbra.tools.summoning.v1alpha1.ParticipateRequest.Identify}
 */
proto.penumbra.tools.summoning.v1alpha1.ParticipateRequest.Identify.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.penumbra.tools.summoning.v1alpha1.ParticipateRequest.Identify;
  return proto.penumbra.tools.summoning.v1alpha1.ParticipateRequest.Identify.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.penumbra.tools.summoning.v1alpha1.ParticipateRequest.Identify} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.penumbra.tools.summoning.v1alpha1.ParticipateRequest.Identify}
 */
proto.penumbra.tools.summoning.v1alpha1.ParticipateRequest.Identify.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = new penumbra_core_keys_v1alpha1_keys_pb.Address;
      reader.readMessage(value,penumbra_core_keys_v1alpha1_keys_pb.Address.deserializeBinaryFromReader);
      msg.setAddress(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.penumbra.tools.summoning.v1alpha1.ParticipateRequest.Identify.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.penumbra.tools.summoning.v1alpha1.ParticipateRequest.Identify.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.penumbra.tools.summoning.v1alpha1.ParticipateRequest.Identify} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.penumbra.tools.summoning.v1alpha1.ParticipateRequest.Identify.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getAddress();
  if (f != null) {
    writer.writeMessage(
      1,
      f,
      penumbra_core_keys_v1alpha1_keys_pb.Address.serializeBinaryToWriter
    );
  }
};


/**
 * optional penumbra.core.keys.v1alpha1.Address address = 1;
 * @return {?proto.penumbra.core.keys.v1alpha1.Address}
 */
proto.penumbra.tools.summoning.v1alpha1.ParticipateRequest.Identify.prototype.getAddress = function() {
  return /** @type{?proto.penumbra.core.keys.v1alpha1.Address} */ (
    jspb.Message.getWrapperField(this, penumbra_core_keys_v1alpha1_keys_pb.Address, 1));
};


/**
 * @param {?proto.penumbra.core.keys.v1alpha1.Address|undefined} value
 * @return {!proto.penumbra.tools.summoning.v1alpha1.ParticipateRequest.Identify} returns this
*/
proto.penumbra.tools.summoning.v1alpha1.ParticipateRequest.Identify.prototype.setAddress = function(value) {
  return jspb.Message.setWrapperField(this, 1, value);
};


/**
 * Clears the message field making it undefined.
 * @return {!proto.penumbra.tools.summoning.v1alpha1.ParticipateRequest.Identify} returns this
 */
proto.penumbra.tools.summoning.v1alpha1.ParticipateRequest.Identify.prototype.clearAddress = function() {
  return this.setAddress(undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.penumbra.tools.summoning.v1alpha1.ParticipateRequest.Identify.prototype.hasAddress = function() {
  return jspb.Message.getField(this, 1) != null;
};





if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.penumbra.tools.summoning.v1alpha1.ParticipateRequest.Contribution.prototype.toObject = function(opt_includeInstance) {
  return proto.penumbra.tools.summoning.v1alpha1.ParticipateRequest.Contribution.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.penumbra.tools.summoning.v1alpha1.ParticipateRequest.Contribution} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.penumbra.tools.summoning.v1alpha1.ParticipateRequest.Contribution.toObject = function(includeInstance, msg) {
  var f, obj = {
    updated: (f = msg.getUpdated()) && proto.penumbra.tools.summoning.v1alpha1.CeremonyCrs.toObject(includeInstance, f),
    updateProofs: (f = msg.getUpdateProofs()) && proto.penumbra.tools.summoning.v1alpha1.CeremonyLinkingProof.toObject(includeInstance, f),
    parentHashes: (f = msg.getParentHashes()) && proto.penumbra.tools.summoning.v1alpha1.CeremonyParentHashes.toObject(includeInstance, f)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.penumbra.tools.summoning.v1alpha1.ParticipateRequest.Contribution}
 */
proto.penumbra.tools.summoning.v1alpha1.ParticipateRequest.Contribution.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.penumbra.tools.summoning.v1alpha1.ParticipateRequest.Contribution;
  return proto.penumbra.tools.summoning.v1alpha1.ParticipateRequest.Contribution.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.penumbra.tools.summoning.v1alpha1.ParticipateRequest.Contribution} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.penumbra.tools.summoning.v1alpha1.ParticipateRequest.Contribution}
 */
proto.penumbra.tools.summoning.v1alpha1.ParticipateRequest.Contribution.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = new proto.penumbra.tools.summoning.v1alpha1.CeremonyCrs;
      reader.readMessage(value,proto.penumbra.tools.summoning.v1alpha1.CeremonyCrs.deserializeBinaryFromReader);
      msg.setUpdated(value);
      break;
    case 2:
      var value = new proto.penumbra.tools.summoning.v1alpha1.CeremonyLinkingProof;
      reader.readMessage(value,proto.penumbra.tools.summoning.v1alpha1.CeremonyLinkingProof.deserializeBinaryFromReader);
      msg.setUpdateProofs(value);
      break;
    case 3:
      var value = new proto.penumbra.tools.summoning.v1alpha1.CeremonyParentHashes;
      reader.readMessage(value,proto.penumbra.tools.summoning.v1alpha1.CeremonyParentHashes.deserializeBinaryFromReader);
      msg.setParentHashes(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.penumbra.tools.summoning.v1alpha1.ParticipateRequest.Contribution.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.penumbra.tools.summoning.v1alpha1.ParticipateRequest.Contribution.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.penumbra.tools.summoning.v1alpha1.ParticipateRequest.Contribution} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.penumbra.tools.summoning.v1alpha1.ParticipateRequest.Contribution.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getUpdated();
  if (f != null) {
    writer.writeMessage(
      1,
      f,
      proto.penumbra.tools.summoning.v1alpha1.CeremonyCrs.serializeBinaryToWriter
    );
  }
  f = message.getUpdateProofs();
  if (f != null) {
    writer.writeMessage(
      2,
      f,
      proto.penumbra.tools.summoning.v1alpha1.CeremonyLinkingProof.serializeBinaryToWriter
    );
  }
  f = message.getParentHashes();
  if (f != null) {
    writer.writeMessage(
      3,
      f,
      proto.penumbra.tools.summoning.v1alpha1.CeremonyParentHashes.serializeBinaryToWriter
    );
  }
};


/**
 * optional CeremonyCrs updated = 1;
 * @return {?proto.penumbra.tools.summoning.v1alpha1.CeremonyCrs}
 */
proto.penumbra.tools.summoning.v1alpha1.ParticipateRequest.Contribution.prototype.getUpdated = function() {
  return /** @type{?proto.penumbra.tools.summoning.v1alpha1.CeremonyCrs} */ (
    jspb.Message.getWrapperField(this, proto.penumbra.tools.summoning.v1alpha1.CeremonyCrs, 1));
};


/**
 * @param {?proto.penumbra.tools.summoning.v1alpha1.CeremonyCrs|undefined} value
 * @return {!proto.penumbra.tools.summoning.v1alpha1.ParticipateRequest.Contribution} returns this
*/
proto.penumbra.tools.summoning.v1alpha1.ParticipateRequest.Contribution.prototype.setUpdated = function(value) {
  return jspb.Message.setWrapperField(this, 1, value);
};


/**
 * Clears the message field making it undefined.
 * @return {!proto.penumbra.tools.summoning.v1alpha1.ParticipateRequest.Contribution} returns this
 */
proto.penumbra.tools.summoning.v1alpha1.ParticipateRequest.Contribution.prototype.clearUpdated = function() {
  return this.setUpdated(undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.penumbra.tools.summoning.v1alpha1.ParticipateRequest.Contribution.prototype.hasUpdated = function() {
  return jspb.Message.getField(this, 1) != null;
};


/**
 * optional CeremonyLinkingProof update_proofs = 2;
 * @return {?proto.penumbra.tools.summoning.v1alpha1.CeremonyLinkingProof}
 */
proto.penumbra.tools.summoning.v1alpha1.ParticipateRequest.Contribution.prototype.getUpdateProofs = function() {
  return /** @type{?proto.penumbra.tools.summoning.v1alpha1.CeremonyLinkingProof} */ (
    jspb.Message.getWrapperField(this, proto.penumbra.tools.summoning.v1alpha1.CeremonyLinkingProof, 2));
};


/**
 * @param {?proto.penumbra.tools.summoning.v1alpha1.CeremonyLinkingProof|undefined} value
 * @return {!proto.penumbra.tools.summoning.v1alpha1.ParticipateRequest.Contribution} returns this
*/
proto.penumbra.tools.summoning.v1alpha1.ParticipateRequest.Contribution.prototype.setUpdateProofs = function(value) {
  return jspb.Message.setWrapperField(this, 2, value);
};


/**
 * Clears the message field making it undefined.
 * @return {!proto.penumbra.tools.summoning.v1alpha1.ParticipateRequest.Contribution} returns this
 */
proto.penumbra.tools.summoning.v1alpha1.ParticipateRequest.Contribution.prototype.clearUpdateProofs = function() {
  return this.setUpdateProofs(undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.penumbra.tools.summoning.v1alpha1.ParticipateRequest.Contribution.prototype.hasUpdateProofs = function() {
  return jspb.Message.getField(this, 2) != null;
};


/**
 * optional CeremonyParentHashes parent_hashes = 3;
 * @return {?proto.penumbra.tools.summoning.v1alpha1.CeremonyParentHashes}
 */
proto.penumbra.tools.summoning.v1alpha1.ParticipateRequest.Contribution.prototype.getParentHashes = function() {
  return /** @type{?proto.penumbra.tools.summoning.v1alpha1.CeremonyParentHashes} */ (
    jspb.Message.getWrapperField(this, proto.penumbra.tools.summoning.v1alpha1.CeremonyParentHashes, 3));
};


/**
 * @param {?proto.penumbra.tools.summoning.v1alpha1.CeremonyParentHashes|undefined} value
 * @return {!proto.penumbra.tools.summoning.v1alpha1.ParticipateRequest.Contribution} returns this
*/
proto.penumbra.tools.summoning.v1alpha1.ParticipateRequest.Contribution.prototype.setParentHashes = function(value) {
  return jspb.Message.setWrapperField(this, 3, value);
};


/**
 * Clears the message field making it undefined.
 * @return {!proto.penumbra.tools.summoning.v1alpha1.ParticipateRequest.Contribution} returns this
 */
proto.penumbra.tools.summoning.v1alpha1.ParticipateRequest.Contribution.prototype.clearParentHashes = function() {
  return this.setParentHashes(undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.penumbra.tools.summoning.v1alpha1.ParticipateRequest.Contribution.prototype.hasParentHashes = function() {
  return jspb.Message.getField(this, 3) != null;
};


/**
 * optional Identify identify = 1;
 * @return {?proto.penumbra.tools.summoning.v1alpha1.ParticipateRequest.Identify}
 */
proto.penumbra.tools.summoning.v1alpha1.ParticipateRequest.prototype.getIdentify = function() {
  return /** @type{?proto.penumbra.tools.summoning.v1alpha1.ParticipateRequest.Identify} */ (
    jspb.Message.getWrapperField(this, proto.penumbra.tools.summoning.v1alpha1.ParticipateRequest.Identify, 1));
};


/**
 * @param {?proto.penumbra.tools.summoning.v1alpha1.ParticipateRequest.Identify|undefined} value
 * @return {!proto.penumbra.tools.summoning.v1alpha1.ParticipateRequest} returns this
*/
proto.penumbra.tools.summoning.v1alpha1.ParticipateRequest.prototype.setIdentify = function(value) {
  return jspb.Message.setOneofWrapperField(this, 1, proto.penumbra.tools.summoning.v1alpha1.ParticipateRequest.oneofGroups_[0], value);
};


/**
 * Clears the message field making it undefined.
 * @return {!proto.penumbra.tools.summoning.v1alpha1.ParticipateRequest} returns this
 */
proto.penumbra.tools.summoning.v1alpha1.ParticipateRequest.prototype.clearIdentify = function() {
  return this.setIdentify(undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.penumbra.tools.summoning.v1alpha1.ParticipateRequest.prototype.hasIdentify = function() {
  return jspb.Message.getField(this, 1) != null;
};


/**
 * optional Contribution contribution = 2;
 * @return {?proto.penumbra.tools.summoning.v1alpha1.ParticipateRequest.Contribution}
 */
proto.penumbra.tools.summoning.v1alpha1.ParticipateRequest.prototype.getContribution = function() {
  return /** @type{?proto.penumbra.tools.summoning.v1alpha1.ParticipateRequest.Contribution} */ (
    jspb.Message.getWrapperField(this, proto.penumbra.tools.summoning.v1alpha1.ParticipateRequest.Contribution, 2));
};


/**
 * @param {?proto.penumbra.tools.summoning.v1alpha1.ParticipateRequest.Contribution|undefined} value
 * @return {!proto.penumbra.tools.summoning.v1alpha1.ParticipateRequest} returns this
*/
proto.penumbra.tools.summoning.v1alpha1.ParticipateRequest.prototype.setContribution = function(value) {
  return jspb.Message.setOneofWrapperField(this, 2, proto.penumbra.tools.summoning.v1alpha1.ParticipateRequest.oneofGroups_[0], value);
};


/**
 * Clears the message field making it undefined.
 * @return {!proto.penumbra.tools.summoning.v1alpha1.ParticipateRequest} returns this
 */
proto.penumbra.tools.summoning.v1alpha1.ParticipateRequest.prototype.clearContribution = function() {
  return this.setContribution(undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.penumbra.tools.summoning.v1alpha1.ParticipateRequest.prototype.hasContribution = function() {
  return jspb.Message.getField(this, 2) != null;
};





if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.penumbra.tools.summoning.v1alpha1.CeremonyCrs.prototype.toObject = function(opt_includeInstance) {
  return proto.penumbra.tools.summoning.v1alpha1.CeremonyCrs.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.penumbra.tools.summoning.v1alpha1.CeremonyCrs} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.penumbra.tools.summoning.v1alpha1.CeremonyCrs.toObject = function(includeInstance, msg) {
  var f, obj = {
    spend: msg.getSpend_asB64(),
    output: msg.getOutput_asB64(),
    delegatorVote: msg.getDelegatorVote_asB64(),
    undelegateClaim: msg.getUndelegateClaim_asB64(),
    swap: msg.getSwap_asB64(),
    swapClaim: msg.getSwapClaim_asB64(),
    nulliferDerivationCrs: msg.getNulliferDerivationCrs_asB64()
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.penumbra.tools.summoning.v1alpha1.CeremonyCrs}
 */
proto.penumbra.tools.summoning.v1alpha1.CeremonyCrs.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.penumbra.tools.summoning.v1alpha1.CeremonyCrs;
  return proto.penumbra.tools.summoning.v1alpha1.CeremonyCrs.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.penumbra.tools.summoning.v1alpha1.CeremonyCrs} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.penumbra.tools.summoning.v1alpha1.CeremonyCrs}
 */
proto.penumbra.tools.summoning.v1alpha1.CeremonyCrs.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 100:
      var value = /** @type {!Uint8Array} */ (reader.readBytes());
      msg.setSpend(value);
      break;
    case 101:
      var value = /** @type {!Uint8Array} */ (reader.readBytes());
      msg.setOutput(value);
      break;
    case 102:
      var value = /** @type {!Uint8Array} */ (reader.readBytes());
      msg.setDelegatorVote(value);
      break;
    case 103:
      var value = /** @type {!Uint8Array} */ (reader.readBytes());
      msg.setUndelegateClaim(value);
      break;
    case 104:
      var value = /** @type {!Uint8Array} */ (reader.readBytes());
      msg.setSwap(value);
      break;
    case 105:
      var value = /** @type {!Uint8Array} */ (reader.readBytes());
      msg.setSwapClaim(value);
      break;
    case 106:
      var value = /** @type {!Uint8Array} */ (reader.readBytes());
      msg.setNulliferDerivationCrs(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.penumbra.tools.summoning.v1alpha1.CeremonyCrs.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.penumbra.tools.summoning.v1alpha1.CeremonyCrs.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.penumbra.tools.summoning.v1alpha1.CeremonyCrs} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.penumbra.tools.summoning.v1alpha1.CeremonyCrs.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getSpend_asU8();
  if (f.length > 0) {
    writer.writeBytes(
      100,
      f
    );
  }
  f = message.getOutput_asU8();
  if (f.length > 0) {
    writer.writeBytes(
      101,
      f
    );
  }
  f = message.getDelegatorVote_asU8();
  if (f.length > 0) {
    writer.writeBytes(
      102,
      f
    );
  }
  f = message.getUndelegateClaim_asU8();
  if (f.length > 0) {
    writer.writeBytes(
      103,
      f
    );
  }
  f = message.getSwap_asU8();
  if (f.length > 0) {
    writer.writeBytes(
      104,
      f
    );
  }
  f = message.getSwapClaim_asU8();
  if (f.length > 0) {
    writer.writeBytes(
      105,
      f
    );
  }
  f = message.getNulliferDerivationCrs_asU8();
  if (f.length > 0) {
    writer.writeBytes(
      106,
      f
    );
  }
};


/**
 * optional bytes spend = 100;
 * @return {!(string|Uint8Array)}
 */
proto.penumbra.tools.summoning.v1alpha1.CeremonyCrs.prototype.getSpend = function() {
  return /** @type {!(string|Uint8Array)} */ (jspb.Message.getFieldWithDefault(this, 100, ""));
};


/**
 * optional bytes spend = 100;
 * This is a type-conversion wrapper around `getSpend()`
 * @return {string}
 */
proto.penumbra.tools.summoning.v1alpha1.CeremonyCrs.prototype.getSpend_asB64 = function() {
  return /** @type {string} */ (jspb.Message.bytesAsB64(
      this.getSpend()));
};


/**
 * optional bytes spend = 100;
 * Note that Uint8Array is not supported on all browsers.
 * @see http://caniuse.com/Uint8Array
 * This is a type-conversion wrapper around `getSpend()`
 * @return {!Uint8Array}
 */
proto.penumbra.tools.summoning.v1alpha1.CeremonyCrs.prototype.getSpend_asU8 = function() {
  return /** @type {!Uint8Array} */ (jspb.Message.bytesAsU8(
      this.getSpend()));
};


/**
 * @param {!(string|Uint8Array)} value
 * @return {!proto.penumbra.tools.summoning.v1alpha1.CeremonyCrs} returns this
 */
proto.penumbra.tools.summoning.v1alpha1.CeremonyCrs.prototype.setSpend = function(value) {
  return jspb.Message.setProto3BytesField(this, 100, value);
};


/**
 * optional bytes output = 101;
 * @return {!(string|Uint8Array)}
 */
proto.penumbra.tools.summoning.v1alpha1.CeremonyCrs.prototype.getOutput = function() {
  return /** @type {!(string|Uint8Array)} */ (jspb.Message.getFieldWithDefault(this, 101, ""));
};


/**
 * optional bytes output = 101;
 * This is a type-conversion wrapper around `getOutput()`
 * @return {string}
 */
proto.penumbra.tools.summoning.v1alpha1.CeremonyCrs.prototype.getOutput_asB64 = function() {
  return /** @type {string} */ (jspb.Message.bytesAsB64(
      this.getOutput()));
};


/**
 * optional bytes output = 101;
 * Note that Uint8Array is not supported on all browsers.
 * @see http://caniuse.com/Uint8Array
 * This is a type-conversion wrapper around `getOutput()`
 * @return {!Uint8Array}
 */
proto.penumbra.tools.summoning.v1alpha1.CeremonyCrs.prototype.getOutput_asU8 = function() {
  return /** @type {!Uint8Array} */ (jspb.Message.bytesAsU8(
      this.getOutput()));
};


/**
 * @param {!(string|Uint8Array)} value
 * @return {!proto.penumbra.tools.summoning.v1alpha1.CeremonyCrs} returns this
 */
proto.penumbra.tools.summoning.v1alpha1.CeremonyCrs.prototype.setOutput = function(value) {
  return jspb.Message.setProto3BytesField(this, 101, value);
};


/**
 * optional bytes delegator_vote = 102;
 * @return {!(string|Uint8Array)}
 */
proto.penumbra.tools.summoning.v1alpha1.CeremonyCrs.prototype.getDelegatorVote = function() {
  return /** @type {!(string|Uint8Array)} */ (jspb.Message.getFieldWithDefault(this, 102, ""));
};


/**
 * optional bytes delegator_vote = 102;
 * This is a type-conversion wrapper around `getDelegatorVote()`
 * @return {string}
 */
proto.penumbra.tools.summoning.v1alpha1.CeremonyCrs.prototype.getDelegatorVote_asB64 = function() {
  return /** @type {string} */ (jspb.Message.bytesAsB64(
      this.getDelegatorVote()));
};


/**
 * optional bytes delegator_vote = 102;
 * Note that Uint8Array is not supported on all browsers.
 * @see http://caniuse.com/Uint8Array
 * This is a type-conversion wrapper around `getDelegatorVote()`
 * @return {!Uint8Array}
 */
proto.penumbra.tools.summoning.v1alpha1.CeremonyCrs.prototype.getDelegatorVote_asU8 = function() {
  return /** @type {!Uint8Array} */ (jspb.Message.bytesAsU8(
      this.getDelegatorVote()));
};


/**
 * @param {!(string|Uint8Array)} value
 * @return {!proto.penumbra.tools.summoning.v1alpha1.CeremonyCrs} returns this
 */
proto.penumbra.tools.summoning.v1alpha1.CeremonyCrs.prototype.setDelegatorVote = function(value) {
  return jspb.Message.setProto3BytesField(this, 102, value);
};


/**
 * optional bytes undelegate_claim = 103;
 * @return {!(string|Uint8Array)}
 */
proto.penumbra.tools.summoning.v1alpha1.CeremonyCrs.prototype.getUndelegateClaim = function() {
  return /** @type {!(string|Uint8Array)} */ (jspb.Message.getFieldWithDefault(this, 103, ""));
};


/**
 * optional bytes undelegate_claim = 103;
 * This is a type-conversion wrapper around `getUndelegateClaim()`
 * @return {string}
 */
proto.penumbra.tools.summoning.v1alpha1.CeremonyCrs.prototype.getUndelegateClaim_asB64 = function() {
  return /** @type {string} */ (jspb.Message.bytesAsB64(
      this.getUndelegateClaim()));
};


/**
 * optional bytes undelegate_claim = 103;
 * Note that Uint8Array is not supported on all browsers.
 * @see http://caniuse.com/Uint8Array
 * This is a type-conversion wrapper around `getUndelegateClaim()`
 * @return {!Uint8Array}
 */
proto.penumbra.tools.summoning.v1alpha1.CeremonyCrs.prototype.getUndelegateClaim_asU8 = function() {
  return /** @type {!Uint8Array} */ (jspb.Message.bytesAsU8(
      this.getUndelegateClaim()));
};


/**
 * @param {!(string|Uint8Array)} value
 * @return {!proto.penumbra.tools.summoning.v1alpha1.CeremonyCrs} returns this
 */
proto.penumbra.tools.summoning.v1alpha1.CeremonyCrs.prototype.setUndelegateClaim = function(value) {
  return jspb.Message.setProto3BytesField(this, 103, value);
};


/**
 * optional bytes swap = 104;
 * @return {!(string|Uint8Array)}
 */
proto.penumbra.tools.summoning.v1alpha1.CeremonyCrs.prototype.getSwap = function() {
  return /** @type {!(string|Uint8Array)} */ (jspb.Message.getFieldWithDefault(this, 104, ""));
};


/**
 * optional bytes swap = 104;
 * This is a type-conversion wrapper around `getSwap()`
 * @return {string}
 */
proto.penumbra.tools.summoning.v1alpha1.CeremonyCrs.prototype.getSwap_asB64 = function() {
  return /** @type {string} */ (jspb.Message.bytesAsB64(
      this.getSwap()));
};


/**
 * optional bytes swap = 104;
 * Note that Uint8Array is not supported on all browsers.
 * @see http://caniuse.com/Uint8Array
 * This is a type-conversion wrapper around `getSwap()`
 * @return {!Uint8Array}
 */
proto.penumbra.tools.summoning.v1alpha1.CeremonyCrs.prototype.getSwap_asU8 = function() {
  return /** @type {!Uint8Array} */ (jspb.Message.bytesAsU8(
      this.getSwap()));
};


/**
 * @param {!(string|Uint8Array)} value
 * @return {!proto.penumbra.tools.summoning.v1alpha1.CeremonyCrs} returns this
 */
proto.penumbra.tools.summoning.v1alpha1.CeremonyCrs.prototype.setSwap = function(value) {
  return jspb.Message.setProto3BytesField(this, 104, value);
};


/**
 * optional bytes swap_claim = 105;
 * @return {!(string|Uint8Array)}
 */
proto.penumbra.tools.summoning.v1alpha1.CeremonyCrs.prototype.getSwapClaim = function() {
  return /** @type {!(string|Uint8Array)} */ (jspb.Message.getFieldWithDefault(this, 105, ""));
};


/**
 * optional bytes swap_claim = 105;
 * This is a type-conversion wrapper around `getSwapClaim()`
 * @return {string}
 */
proto.penumbra.tools.summoning.v1alpha1.CeremonyCrs.prototype.getSwapClaim_asB64 = function() {
  return /** @type {string} */ (jspb.Message.bytesAsB64(
      this.getSwapClaim()));
};


/**
 * optional bytes swap_claim = 105;
 * Note that Uint8Array is not supported on all browsers.
 * @see http://caniuse.com/Uint8Array
 * This is a type-conversion wrapper around `getSwapClaim()`
 * @return {!Uint8Array}
 */
proto.penumbra.tools.summoning.v1alpha1.CeremonyCrs.prototype.getSwapClaim_asU8 = function() {
  return /** @type {!Uint8Array} */ (jspb.Message.bytesAsU8(
      this.getSwapClaim()));
};


/**
 * @param {!(string|Uint8Array)} value
 * @return {!proto.penumbra.tools.summoning.v1alpha1.CeremonyCrs} returns this
 */
proto.penumbra.tools.summoning.v1alpha1.CeremonyCrs.prototype.setSwapClaim = function(value) {
  return jspb.Message.setProto3BytesField(this, 105, value);
};


/**
 * optional bytes nullifer_derivation_crs = 106;
 * @return {!(string|Uint8Array)}
 */
proto.penumbra.tools.summoning.v1alpha1.CeremonyCrs.prototype.getNulliferDerivationCrs = function() {
  return /** @type {!(string|Uint8Array)} */ (jspb.Message.getFieldWithDefault(this, 106, ""));
};


/**
 * optional bytes nullifer_derivation_crs = 106;
 * This is a type-conversion wrapper around `getNulliferDerivationCrs()`
 * @return {string}
 */
proto.penumbra.tools.summoning.v1alpha1.CeremonyCrs.prototype.getNulliferDerivationCrs_asB64 = function() {
  return /** @type {string} */ (jspb.Message.bytesAsB64(
      this.getNulliferDerivationCrs()));
};


/**
 * optional bytes nullifer_derivation_crs = 106;
 * Note that Uint8Array is not supported on all browsers.
 * @see http://caniuse.com/Uint8Array
 * This is a type-conversion wrapper around `getNulliferDerivationCrs()`
 * @return {!Uint8Array}
 */
proto.penumbra.tools.summoning.v1alpha1.CeremonyCrs.prototype.getNulliferDerivationCrs_asU8 = function() {
  return /** @type {!Uint8Array} */ (jspb.Message.bytesAsU8(
      this.getNulliferDerivationCrs()));
};


/**
 * @param {!(string|Uint8Array)} value
 * @return {!proto.penumbra.tools.summoning.v1alpha1.CeremonyCrs} returns this
 */
proto.penumbra.tools.summoning.v1alpha1.CeremonyCrs.prototype.setNulliferDerivationCrs = function(value) {
  return jspb.Message.setProto3BytesField(this, 106, value);
};





if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.penumbra.tools.summoning.v1alpha1.CeremonyLinkingProof.prototype.toObject = function(opt_includeInstance) {
  return proto.penumbra.tools.summoning.v1alpha1.CeremonyLinkingProof.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.penumbra.tools.summoning.v1alpha1.CeremonyLinkingProof} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.penumbra.tools.summoning.v1alpha1.CeremonyLinkingProof.toObject = function(includeInstance, msg) {
  var f, obj = {
    spend: msg.getSpend_asB64(),
    output: msg.getOutput_asB64(),
    delegatorVote: msg.getDelegatorVote_asB64(),
    undelegateClaim: msg.getUndelegateClaim_asB64(),
    swap: msg.getSwap_asB64(),
    swapClaim: msg.getSwapClaim_asB64(),
    nulliferDerivationCrs: msg.getNulliferDerivationCrs_asB64()
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.penumbra.tools.summoning.v1alpha1.CeremonyLinkingProof}
 */
proto.penumbra.tools.summoning.v1alpha1.CeremonyLinkingProof.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.penumbra.tools.summoning.v1alpha1.CeremonyLinkingProof;
  return proto.penumbra.tools.summoning.v1alpha1.CeremonyLinkingProof.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.penumbra.tools.summoning.v1alpha1.CeremonyLinkingProof} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.penumbra.tools.summoning.v1alpha1.CeremonyLinkingProof}
 */
proto.penumbra.tools.summoning.v1alpha1.CeremonyLinkingProof.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 100:
      var value = /** @type {!Uint8Array} */ (reader.readBytes());
      msg.setSpend(value);
      break;
    case 101:
      var value = /** @type {!Uint8Array} */ (reader.readBytes());
      msg.setOutput(value);
      break;
    case 102:
      var value = /** @type {!Uint8Array} */ (reader.readBytes());
      msg.setDelegatorVote(value);
      break;
    case 103:
      var value = /** @type {!Uint8Array} */ (reader.readBytes());
      msg.setUndelegateClaim(value);
      break;
    case 104:
      var value = /** @type {!Uint8Array} */ (reader.readBytes());
      msg.setSwap(value);
      break;
    case 105:
      var value = /** @type {!Uint8Array} */ (reader.readBytes());
      msg.setSwapClaim(value);
      break;
    case 106:
      var value = /** @type {!Uint8Array} */ (reader.readBytes());
      msg.setNulliferDerivationCrs(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.penumbra.tools.summoning.v1alpha1.CeremonyLinkingProof.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.penumbra.tools.summoning.v1alpha1.CeremonyLinkingProof.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.penumbra.tools.summoning.v1alpha1.CeremonyLinkingProof} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.penumbra.tools.summoning.v1alpha1.CeremonyLinkingProof.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getSpend_asU8();
  if (f.length > 0) {
    writer.writeBytes(
      100,
      f
    );
  }
  f = message.getOutput_asU8();
  if (f.length > 0) {
    writer.writeBytes(
      101,
      f
    );
  }
  f = message.getDelegatorVote_asU8();
  if (f.length > 0) {
    writer.writeBytes(
      102,
      f
    );
  }
  f = message.getUndelegateClaim_asU8();
  if (f.length > 0) {
    writer.writeBytes(
      103,
      f
    );
  }
  f = message.getSwap_asU8();
  if (f.length > 0) {
    writer.writeBytes(
      104,
      f
    );
  }
  f = message.getSwapClaim_asU8();
  if (f.length > 0) {
    writer.writeBytes(
      105,
      f
    );
  }
  f = message.getNulliferDerivationCrs_asU8();
  if (f.length > 0) {
    writer.writeBytes(
      106,
      f
    );
  }
};


/**
 * optional bytes spend = 100;
 * @return {!(string|Uint8Array)}
 */
proto.penumbra.tools.summoning.v1alpha1.CeremonyLinkingProof.prototype.getSpend = function() {
  return /** @type {!(string|Uint8Array)} */ (jspb.Message.getFieldWithDefault(this, 100, ""));
};


/**
 * optional bytes spend = 100;
 * This is a type-conversion wrapper around `getSpend()`
 * @return {string}
 */
proto.penumbra.tools.summoning.v1alpha1.CeremonyLinkingProof.prototype.getSpend_asB64 = function() {
  return /** @type {string} */ (jspb.Message.bytesAsB64(
      this.getSpend()));
};


/**
 * optional bytes spend = 100;
 * Note that Uint8Array is not supported on all browsers.
 * @see http://caniuse.com/Uint8Array
 * This is a type-conversion wrapper around `getSpend()`
 * @return {!Uint8Array}
 */
proto.penumbra.tools.summoning.v1alpha1.CeremonyLinkingProof.prototype.getSpend_asU8 = function() {
  return /** @type {!Uint8Array} */ (jspb.Message.bytesAsU8(
      this.getSpend()));
};


/**
 * @param {!(string|Uint8Array)} value
 * @return {!proto.penumbra.tools.summoning.v1alpha1.CeremonyLinkingProof} returns this
 */
proto.penumbra.tools.summoning.v1alpha1.CeremonyLinkingProof.prototype.setSpend = function(value) {
  return jspb.Message.setProto3BytesField(this, 100, value);
};


/**
 * optional bytes output = 101;
 * @return {!(string|Uint8Array)}
 */
proto.penumbra.tools.summoning.v1alpha1.CeremonyLinkingProof.prototype.getOutput = function() {
  return /** @type {!(string|Uint8Array)} */ (jspb.Message.getFieldWithDefault(this, 101, ""));
};


/**
 * optional bytes output = 101;
 * This is a type-conversion wrapper around `getOutput()`
 * @return {string}
 */
proto.penumbra.tools.summoning.v1alpha1.CeremonyLinkingProof.prototype.getOutput_asB64 = function() {
  return /** @type {string} */ (jspb.Message.bytesAsB64(
      this.getOutput()));
};


/**
 * optional bytes output = 101;
 * Note that Uint8Array is not supported on all browsers.
 * @see http://caniuse.com/Uint8Array
 * This is a type-conversion wrapper around `getOutput()`
 * @return {!Uint8Array}
 */
proto.penumbra.tools.summoning.v1alpha1.CeremonyLinkingProof.prototype.getOutput_asU8 = function() {
  return /** @type {!Uint8Array} */ (jspb.Message.bytesAsU8(
      this.getOutput()));
};


/**
 * @param {!(string|Uint8Array)} value
 * @return {!proto.penumbra.tools.summoning.v1alpha1.CeremonyLinkingProof} returns this
 */
proto.penumbra.tools.summoning.v1alpha1.CeremonyLinkingProof.prototype.setOutput = function(value) {
  return jspb.Message.setProto3BytesField(this, 101, value);
};


/**
 * optional bytes delegator_vote = 102;
 * @return {!(string|Uint8Array)}
 */
proto.penumbra.tools.summoning.v1alpha1.CeremonyLinkingProof.prototype.getDelegatorVote = function() {
  return /** @type {!(string|Uint8Array)} */ (jspb.Message.getFieldWithDefault(this, 102, ""));
};


/**
 * optional bytes delegator_vote = 102;
 * This is a type-conversion wrapper around `getDelegatorVote()`
 * @return {string}
 */
proto.penumbra.tools.summoning.v1alpha1.CeremonyLinkingProof.prototype.getDelegatorVote_asB64 = function() {
  return /** @type {string} */ (jspb.Message.bytesAsB64(
      this.getDelegatorVote()));
};


/**
 * optional bytes delegator_vote = 102;
 * Note that Uint8Array is not supported on all browsers.
 * @see http://caniuse.com/Uint8Array
 * This is a type-conversion wrapper around `getDelegatorVote()`
 * @return {!Uint8Array}
 */
proto.penumbra.tools.summoning.v1alpha1.CeremonyLinkingProof.prototype.getDelegatorVote_asU8 = function() {
  return /** @type {!Uint8Array} */ (jspb.Message.bytesAsU8(
      this.getDelegatorVote()));
};


/**
 * @param {!(string|Uint8Array)} value
 * @return {!proto.penumbra.tools.summoning.v1alpha1.CeremonyLinkingProof} returns this
 */
proto.penumbra.tools.summoning.v1alpha1.CeremonyLinkingProof.prototype.setDelegatorVote = function(value) {
  return jspb.Message.setProto3BytesField(this, 102, value);
};


/**
 * optional bytes undelegate_claim = 103;
 * @return {!(string|Uint8Array)}
 */
proto.penumbra.tools.summoning.v1alpha1.CeremonyLinkingProof.prototype.getUndelegateClaim = function() {
  return /** @type {!(string|Uint8Array)} */ (jspb.Message.getFieldWithDefault(this, 103, ""));
};


/**
 * optional bytes undelegate_claim = 103;
 * This is a type-conversion wrapper around `getUndelegateClaim()`
 * @return {string}
 */
proto.penumbra.tools.summoning.v1alpha1.CeremonyLinkingProof.prototype.getUndelegateClaim_asB64 = function() {
  return /** @type {string} */ (jspb.Message.bytesAsB64(
      this.getUndelegateClaim()));
};


/**
 * optional bytes undelegate_claim = 103;
 * Note that Uint8Array is not supported on all browsers.
 * @see http://caniuse.com/Uint8Array
 * This is a type-conversion wrapper around `getUndelegateClaim()`
 * @return {!Uint8Array}
 */
proto.penumbra.tools.summoning.v1alpha1.CeremonyLinkingProof.prototype.getUndelegateClaim_asU8 = function() {
  return /** @type {!Uint8Array} */ (jspb.Message.bytesAsU8(
      this.getUndelegateClaim()));
};


/**
 * @param {!(string|Uint8Array)} value
 * @return {!proto.penumbra.tools.summoning.v1alpha1.CeremonyLinkingProof} returns this
 */
proto.penumbra.tools.summoning.v1alpha1.CeremonyLinkingProof.prototype.setUndelegateClaim = function(value) {
  return jspb.Message.setProto3BytesField(this, 103, value);
};


/**
 * optional bytes swap = 104;
 * @return {!(string|Uint8Array)}
 */
proto.penumbra.tools.summoning.v1alpha1.CeremonyLinkingProof.prototype.getSwap = function() {
  return /** @type {!(string|Uint8Array)} */ (jspb.Message.getFieldWithDefault(this, 104, ""));
};


/**
 * optional bytes swap = 104;
 * This is a type-conversion wrapper around `getSwap()`
 * @return {string}
 */
proto.penumbra.tools.summoning.v1alpha1.CeremonyLinkingProof.prototype.getSwap_asB64 = function() {
  return /** @type {string} */ (jspb.Message.bytesAsB64(
      this.getSwap()));
};


/**
 * optional bytes swap = 104;
 * Note that Uint8Array is not supported on all browsers.
 * @see http://caniuse.com/Uint8Array
 * This is a type-conversion wrapper around `getSwap()`
 * @return {!Uint8Array}
 */
proto.penumbra.tools.summoning.v1alpha1.CeremonyLinkingProof.prototype.getSwap_asU8 = function() {
  return /** @type {!Uint8Array} */ (jspb.Message.bytesAsU8(
      this.getSwap()));
};


/**
 * @param {!(string|Uint8Array)} value
 * @return {!proto.penumbra.tools.summoning.v1alpha1.CeremonyLinkingProof} returns this
 */
proto.penumbra.tools.summoning.v1alpha1.CeremonyLinkingProof.prototype.setSwap = function(value) {
  return jspb.Message.setProto3BytesField(this, 104, value);
};


/**
 * optional bytes swap_claim = 105;
 * @return {!(string|Uint8Array)}
 */
proto.penumbra.tools.summoning.v1alpha1.CeremonyLinkingProof.prototype.getSwapClaim = function() {
  return /** @type {!(string|Uint8Array)} */ (jspb.Message.getFieldWithDefault(this, 105, ""));
};


/**
 * optional bytes swap_claim = 105;
 * This is a type-conversion wrapper around `getSwapClaim()`
 * @return {string}
 */
proto.penumbra.tools.summoning.v1alpha1.CeremonyLinkingProof.prototype.getSwapClaim_asB64 = function() {
  return /** @type {string} */ (jspb.Message.bytesAsB64(
      this.getSwapClaim()));
};


/**
 * optional bytes swap_claim = 105;
 * Note that Uint8Array is not supported on all browsers.
 * @see http://caniuse.com/Uint8Array
 * This is a type-conversion wrapper around `getSwapClaim()`
 * @return {!Uint8Array}
 */
proto.penumbra.tools.summoning.v1alpha1.CeremonyLinkingProof.prototype.getSwapClaim_asU8 = function() {
  return /** @type {!Uint8Array} */ (jspb.Message.bytesAsU8(
      this.getSwapClaim()));
};


/**
 * @param {!(string|Uint8Array)} value
 * @return {!proto.penumbra.tools.summoning.v1alpha1.CeremonyLinkingProof} returns this
 */
proto.penumbra.tools.summoning.v1alpha1.CeremonyLinkingProof.prototype.setSwapClaim = function(value) {
  return jspb.Message.setProto3BytesField(this, 105, value);
};


/**
 * optional bytes nullifer_derivation_crs = 106;
 * @return {!(string|Uint8Array)}
 */
proto.penumbra.tools.summoning.v1alpha1.CeremonyLinkingProof.prototype.getNulliferDerivationCrs = function() {
  return /** @type {!(string|Uint8Array)} */ (jspb.Message.getFieldWithDefault(this, 106, ""));
};


/**
 * optional bytes nullifer_derivation_crs = 106;
 * This is a type-conversion wrapper around `getNulliferDerivationCrs()`
 * @return {string}
 */
proto.penumbra.tools.summoning.v1alpha1.CeremonyLinkingProof.prototype.getNulliferDerivationCrs_asB64 = function() {
  return /** @type {string} */ (jspb.Message.bytesAsB64(
      this.getNulliferDerivationCrs()));
};


/**
 * optional bytes nullifer_derivation_crs = 106;
 * Note that Uint8Array is not supported on all browsers.
 * @see http://caniuse.com/Uint8Array
 * This is a type-conversion wrapper around `getNulliferDerivationCrs()`
 * @return {!Uint8Array}
 */
proto.penumbra.tools.summoning.v1alpha1.CeremonyLinkingProof.prototype.getNulliferDerivationCrs_asU8 = function() {
  return /** @type {!Uint8Array} */ (jspb.Message.bytesAsU8(
      this.getNulliferDerivationCrs()));
};


/**
 * @param {!(string|Uint8Array)} value
 * @return {!proto.penumbra.tools.summoning.v1alpha1.CeremonyLinkingProof} returns this
 */
proto.penumbra.tools.summoning.v1alpha1.CeremonyLinkingProof.prototype.setNulliferDerivationCrs = function(value) {
  return jspb.Message.setProto3BytesField(this, 106, value);
};





if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.penumbra.tools.summoning.v1alpha1.CeremonyParentHashes.prototype.toObject = function(opt_includeInstance) {
  return proto.penumbra.tools.summoning.v1alpha1.CeremonyParentHashes.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.penumbra.tools.summoning.v1alpha1.CeremonyParentHashes} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.penumbra.tools.summoning.v1alpha1.CeremonyParentHashes.toObject = function(includeInstance, msg) {
  var f, obj = {
    spend: msg.getSpend_asB64(),
    output: msg.getOutput_asB64(),
    delegatorVote: msg.getDelegatorVote_asB64(),
    undelegateClaim: msg.getUndelegateClaim_asB64(),
    swap: msg.getSwap_asB64(),
    swapClaim: msg.getSwapClaim_asB64(),
    nulliferDerivationCrs: msg.getNulliferDerivationCrs_asB64()
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.penumbra.tools.summoning.v1alpha1.CeremonyParentHashes}
 */
proto.penumbra.tools.summoning.v1alpha1.CeremonyParentHashes.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.penumbra.tools.summoning.v1alpha1.CeremonyParentHashes;
  return proto.penumbra.tools.summoning.v1alpha1.CeremonyParentHashes.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.penumbra.tools.summoning.v1alpha1.CeremonyParentHashes} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.penumbra.tools.summoning.v1alpha1.CeremonyParentHashes}
 */
proto.penumbra.tools.summoning.v1alpha1.CeremonyParentHashes.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 100:
      var value = /** @type {!Uint8Array} */ (reader.readBytes());
      msg.setSpend(value);
      break;
    case 101:
      var value = /** @type {!Uint8Array} */ (reader.readBytes());
      msg.setOutput(value);
      break;
    case 102:
      var value = /** @type {!Uint8Array} */ (reader.readBytes());
      msg.setDelegatorVote(value);
      break;
    case 103:
      var value = /** @type {!Uint8Array} */ (reader.readBytes());
      msg.setUndelegateClaim(value);
      break;
    case 104:
      var value = /** @type {!Uint8Array} */ (reader.readBytes());
      msg.setSwap(value);
      break;
    case 105:
      var value = /** @type {!Uint8Array} */ (reader.readBytes());
      msg.setSwapClaim(value);
      break;
    case 106:
      var value = /** @type {!Uint8Array} */ (reader.readBytes());
      msg.setNulliferDerivationCrs(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.penumbra.tools.summoning.v1alpha1.CeremonyParentHashes.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.penumbra.tools.summoning.v1alpha1.CeremonyParentHashes.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.penumbra.tools.summoning.v1alpha1.CeremonyParentHashes} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.penumbra.tools.summoning.v1alpha1.CeremonyParentHashes.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getSpend_asU8();
  if (f.length > 0) {
    writer.writeBytes(
      100,
      f
    );
  }
  f = message.getOutput_asU8();
  if (f.length > 0) {
    writer.writeBytes(
      101,
      f
    );
  }
  f = message.getDelegatorVote_asU8();
  if (f.length > 0) {
    writer.writeBytes(
      102,
      f
    );
  }
  f = message.getUndelegateClaim_asU8();
  if (f.length > 0) {
    writer.writeBytes(
      103,
      f
    );
  }
  f = message.getSwap_asU8();
  if (f.length > 0) {
    writer.writeBytes(
      104,
      f
    );
  }
  f = message.getSwapClaim_asU8();
  if (f.length > 0) {
    writer.writeBytes(
      105,
      f
    );
  }
  f = message.getNulliferDerivationCrs_asU8();
  if (f.length > 0) {
    writer.writeBytes(
      106,
      f
    );
  }
};


/**
 * optional bytes spend = 100;
 * @return {!(string|Uint8Array)}
 */
proto.penumbra.tools.summoning.v1alpha1.CeremonyParentHashes.prototype.getSpend = function() {
  return /** @type {!(string|Uint8Array)} */ (jspb.Message.getFieldWithDefault(this, 100, ""));
};


/**
 * optional bytes spend = 100;
 * This is a type-conversion wrapper around `getSpend()`
 * @return {string}
 */
proto.penumbra.tools.summoning.v1alpha1.CeremonyParentHashes.prototype.getSpend_asB64 = function() {
  return /** @type {string} */ (jspb.Message.bytesAsB64(
      this.getSpend()));
};


/**
 * optional bytes spend = 100;
 * Note that Uint8Array is not supported on all browsers.
 * @see http://caniuse.com/Uint8Array
 * This is a type-conversion wrapper around `getSpend()`
 * @return {!Uint8Array}
 */
proto.penumbra.tools.summoning.v1alpha1.CeremonyParentHashes.prototype.getSpend_asU8 = function() {
  return /** @type {!Uint8Array} */ (jspb.Message.bytesAsU8(
      this.getSpend()));
};


/**
 * @param {!(string|Uint8Array)} value
 * @return {!proto.penumbra.tools.summoning.v1alpha1.CeremonyParentHashes} returns this
 */
proto.penumbra.tools.summoning.v1alpha1.CeremonyParentHashes.prototype.setSpend = function(value) {
  return jspb.Message.setProto3BytesField(this, 100, value);
};


/**
 * optional bytes output = 101;
 * @return {!(string|Uint8Array)}
 */
proto.penumbra.tools.summoning.v1alpha1.CeremonyParentHashes.prototype.getOutput = function() {
  return /** @type {!(string|Uint8Array)} */ (jspb.Message.getFieldWithDefault(this, 101, ""));
};


/**
 * optional bytes output = 101;
 * This is a type-conversion wrapper around `getOutput()`
 * @return {string}
 */
proto.penumbra.tools.summoning.v1alpha1.CeremonyParentHashes.prototype.getOutput_asB64 = function() {
  return /** @type {string} */ (jspb.Message.bytesAsB64(
      this.getOutput()));
};


/**
 * optional bytes output = 101;
 * Note that Uint8Array is not supported on all browsers.
 * @see http://caniuse.com/Uint8Array
 * This is a type-conversion wrapper around `getOutput()`
 * @return {!Uint8Array}
 */
proto.penumbra.tools.summoning.v1alpha1.CeremonyParentHashes.prototype.getOutput_asU8 = function() {
  return /** @type {!Uint8Array} */ (jspb.Message.bytesAsU8(
      this.getOutput()));
};


/**
 * @param {!(string|Uint8Array)} value
 * @return {!proto.penumbra.tools.summoning.v1alpha1.CeremonyParentHashes} returns this
 */
proto.penumbra.tools.summoning.v1alpha1.CeremonyParentHashes.prototype.setOutput = function(value) {
  return jspb.Message.setProto3BytesField(this, 101, value);
};


/**
 * optional bytes delegator_vote = 102;
 * @return {!(string|Uint8Array)}
 */
proto.penumbra.tools.summoning.v1alpha1.CeremonyParentHashes.prototype.getDelegatorVote = function() {
  return /** @type {!(string|Uint8Array)} */ (jspb.Message.getFieldWithDefault(this, 102, ""));
};


/**
 * optional bytes delegator_vote = 102;
 * This is a type-conversion wrapper around `getDelegatorVote()`
 * @return {string}
 */
proto.penumbra.tools.summoning.v1alpha1.CeremonyParentHashes.prototype.getDelegatorVote_asB64 = function() {
  return /** @type {string} */ (jspb.Message.bytesAsB64(
      this.getDelegatorVote()));
};


/**
 * optional bytes delegator_vote = 102;
 * Note that Uint8Array is not supported on all browsers.
 * @see http://caniuse.com/Uint8Array
 * This is a type-conversion wrapper around `getDelegatorVote()`
 * @return {!Uint8Array}
 */
proto.penumbra.tools.summoning.v1alpha1.CeremonyParentHashes.prototype.getDelegatorVote_asU8 = function() {
  return /** @type {!Uint8Array} */ (jspb.Message.bytesAsU8(
      this.getDelegatorVote()));
};


/**
 * @param {!(string|Uint8Array)} value
 * @return {!proto.penumbra.tools.summoning.v1alpha1.CeremonyParentHashes} returns this
 */
proto.penumbra.tools.summoning.v1alpha1.CeremonyParentHashes.prototype.setDelegatorVote = function(value) {
  return jspb.Message.setProto3BytesField(this, 102, value);
};


/**
 * optional bytes undelegate_claim = 103;
 * @return {!(string|Uint8Array)}
 */
proto.penumbra.tools.summoning.v1alpha1.CeremonyParentHashes.prototype.getUndelegateClaim = function() {
  return /** @type {!(string|Uint8Array)} */ (jspb.Message.getFieldWithDefault(this, 103, ""));
};


/**
 * optional bytes undelegate_claim = 103;
 * This is a type-conversion wrapper around `getUndelegateClaim()`
 * @return {string}
 */
proto.penumbra.tools.summoning.v1alpha1.CeremonyParentHashes.prototype.getUndelegateClaim_asB64 = function() {
  return /** @type {string} */ (jspb.Message.bytesAsB64(
      this.getUndelegateClaim()));
};


/**
 * optional bytes undelegate_claim = 103;
 * Note that Uint8Array is not supported on all browsers.
 * @see http://caniuse.com/Uint8Array
 * This is a type-conversion wrapper around `getUndelegateClaim()`
 * @return {!Uint8Array}
 */
proto.penumbra.tools.summoning.v1alpha1.CeremonyParentHashes.prototype.getUndelegateClaim_asU8 = function() {
  return /** @type {!Uint8Array} */ (jspb.Message.bytesAsU8(
      this.getUndelegateClaim()));
};


/**
 * @param {!(string|Uint8Array)} value
 * @return {!proto.penumbra.tools.summoning.v1alpha1.CeremonyParentHashes} returns this
 */
proto.penumbra.tools.summoning.v1alpha1.CeremonyParentHashes.prototype.setUndelegateClaim = function(value) {
  return jspb.Message.setProto3BytesField(this, 103, value);
};


/**
 * optional bytes swap = 104;
 * @return {!(string|Uint8Array)}
 */
proto.penumbra.tools.summoning.v1alpha1.CeremonyParentHashes.prototype.getSwap = function() {
  return /** @type {!(string|Uint8Array)} */ (jspb.Message.getFieldWithDefault(this, 104, ""));
};


/**
 * optional bytes swap = 104;
 * This is a type-conversion wrapper around `getSwap()`
 * @return {string}
 */
proto.penumbra.tools.summoning.v1alpha1.CeremonyParentHashes.prototype.getSwap_asB64 = function() {
  return /** @type {string} */ (jspb.Message.bytesAsB64(
      this.getSwap()));
};


/**
 * optional bytes swap = 104;
 * Note that Uint8Array is not supported on all browsers.
 * @see http://caniuse.com/Uint8Array
 * This is a type-conversion wrapper around `getSwap()`
 * @return {!Uint8Array}
 */
proto.penumbra.tools.summoning.v1alpha1.CeremonyParentHashes.prototype.getSwap_asU8 = function() {
  return /** @type {!Uint8Array} */ (jspb.Message.bytesAsU8(
      this.getSwap()));
};


/**
 * @param {!(string|Uint8Array)} value
 * @return {!proto.penumbra.tools.summoning.v1alpha1.CeremonyParentHashes} returns this
 */
proto.penumbra.tools.summoning.v1alpha1.CeremonyParentHashes.prototype.setSwap = function(value) {
  return jspb.Message.setProto3BytesField(this, 104, value);
};


/**
 * optional bytes swap_claim = 105;
 * @return {!(string|Uint8Array)}
 */
proto.penumbra.tools.summoning.v1alpha1.CeremonyParentHashes.prototype.getSwapClaim = function() {
  return /** @type {!(string|Uint8Array)} */ (jspb.Message.getFieldWithDefault(this, 105, ""));
};


/**
 * optional bytes swap_claim = 105;
 * This is a type-conversion wrapper around `getSwapClaim()`
 * @return {string}
 */
proto.penumbra.tools.summoning.v1alpha1.CeremonyParentHashes.prototype.getSwapClaim_asB64 = function() {
  return /** @type {string} */ (jspb.Message.bytesAsB64(
      this.getSwapClaim()));
};


/**
 * optional bytes swap_claim = 105;
 * Note that Uint8Array is not supported on all browsers.
 * @see http://caniuse.com/Uint8Array
 * This is a type-conversion wrapper around `getSwapClaim()`
 * @return {!Uint8Array}
 */
proto.penumbra.tools.summoning.v1alpha1.CeremonyParentHashes.prototype.getSwapClaim_asU8 = function() {
  return /** @type {!Uint8Array} */ (jspb.Message.bytesAsU8(
      this.getSwapClaim()));
};


/**
 * @param {!(string|Uint8Array)} value
 * @return {!proto.penumbra.tools.summoning.v1alpha1.CeremonyParentHashes} returns this
 */
proto.penumbra.tools.summoning.v1alpha1.CeremonyParentHashes.prototype.setSwapClaim = function(value) {
  return jspb.Message.setProto3BytesField(this, 105, value);
};


/**
 * optional bytes nullifer_derivation_crs = 106;
 * @return {!(string|Uint8Array)}
 */
proto.penumbra.tools.summoning.v1alpha1.CeremonyParentHashes.prototype.getNulliferDerivationCrs = function() {
  return /** @type {!(string|Uint8Array)} */ (jspb.Message.getFieldWithDefault(this, 106, ""));
};


/**
 * optional bytes nullifer_derivation_crs = 106;
 * This is a type-conversion wrapper around `getNulliferDerivationCrs()`
 * @return {string}
 */
proto.penumbra.tools.summoning.v1alpha1.CeremonyParentHashes.prototype.getNulliferDerivationCrs_asB64 = function() {
  return /** @type {string} */ (jspb.Message.bytesAsB64(
      this.getNulliferDerivationCrs()));
};


/**
 * optional bytes nullifer_derivation_crs = 106;
 * Note that Uint8Array is not supported on all browsers.
 * @see http://caniuse.com/Uint8Array
 * This is a type-conversion wrapper around `getNulliferDerivationCrs()`
 * @return {!Uint8Array}
 */
proto.penumbra.tools.summoning.v1alpha1.CeremonyParentHashes.prototype.getNulliferDerivationCrs_asU8 = function() {
  return /** @type {!Uint8Array} */ (jspb.Message.bytesAsU8(
      this.getNulliferDerivationCrs()));
};


/**
 * @param {!(string|Uint8Array)} value
 * @return {!proto.penumbra.tools.summoning.v1alpha1.CeremonyParentHashes} returns this
 */
proto.penumbra.tools.summoning.v1alpha1.CeremonyParentHashes.prototype.setNulliferDerivationCrs = function(value) {
  return jspb.Message.setProto3BytesField(this, 106, value);
};



/**
 * Oneof group definitions for this message. Each group defines the field
 * numbers belonging to that group. When of these fields' value is set, all
 * other fields in the group are cleared. During deserialization, if multiple
 * fields are encountered for a group, only the last value seen will be kept.
 * @private {!Array<!Array<number>>}
 * @const
 */
proto.penumbra.tools.summoning.v1alpha1.ParticipateResponse.oneofGroups_ = [[1,2,3]];

/**
 * @enum {number}
 */
proto.penumbra.tools.summoning.v1alpha1.ParticipateResponse.MsgCase = {
  MSG_NOT_SET: 0,
  POSITION: 1,
  CONTRIBUTE_NOW: 2,
  CONFIRM: 3
};

/**
 * @return {proto.penumbra.tools.summoning.v1alpha1.ParticipateResponse.MsgCase}
 */
proto.penumbra.tools.summoning.v1alpha1.ParticipateResponse.prototype.getMsgCase = function() {
  return /** @type {proto.penumbra.tools.summoning.v1alpha1.ParticipateResponse.MsgCase} */(jspb.Message.computeOneofCase(this, proto.penumbra.tools.summoning.v1alpha1.ParticipateResponse.oneofGroups_[0]));
};



if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.penumbra.tools.summoning.v1alpha1.ParticipateResponse.prototype.toObject = function(opt_includeInstance) {
  return proto.penumbra.tools.summoning.v1alpha1.ParticipateResponse.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.penumbra.tools.summoning.v1alpha1.ParticipateResponse} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.penumbra.tools.summoning.v1alpha1.ParticipateResponse.toObject = function(includeInstance, msg) {
  var f, obj = {
    position: (f = msg.getPosition()) && proto.penumbra.tools.summoning.v1alpha1.ParticipateResponse.Position.toObject(includeInstance, f),
    contributeNow: (f = msg.getContributeNow()) && proto.penumbra.tools.summoning.v1alpha1.ParticipateResponse.ContributeNow.toObject(includeInstance, f),
    confirm: (f = msg.getConfirm()) && proto.penumbra.tools.summoning.v1alpha1.ParticipateResponse.Confirm.toObject(includeInstance, f)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.penumbra.tools.summoning.v1alpha1.ParticipateResponse}
 */
proto.penumbra.tools.summoning.v1alpha1.ParticipateResponse.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.penumbra.tools.summoning.v1alpha1.ParticipateResponse;
  return proto.penumbra.tools.summoning.v1alpha1.ParticipateResponse.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.penumbra.tools.summoning.v1alpha1.ParticipateResponse} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.penumbra.tools.summoning.v1alpha1.ParticipateResponse}
 */
proto.penumbra.tools.summoning.v1alpha1.ParticipateResponse.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = new proto.penumbra.tools.summoning.v1alpha1.ParticipateResponse.Position;
      reader.readMessage(value,proto.penumbra.tools.summoning.v1alpha1.ParticipateResponse.Position.deserializeBinaryFromReader);
      msg.setPosition(value);
      break;
    case 2:
      var value = new proto.penumbra.tools.summoning.v1alpha1.ParticipateResponse.ContributeNow;
      reader.readMessage(value,proto.penumbra.tools.summoning.v1alpha1.ParticipateResponse.ContributeNow.deserializeBinaryFromReader);
      msg.setContributeNow(value);
      break;
    case 3:
      var value = new proto.penumbra.tools.summoning.v1alpha1.ParticipateResponse.Confirm;
      reader.readMessage(value,proto.penumbra.tools.summoning.v1alpha1.ParticipateResponse.Confirm.deserializeBinaryFromReader);
      msg.setConfirm(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.penumbra.tools.summoning.v1alpha1.ParticipateResponse.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.penumbra.tools.summoning.v1alpha1.ParticipateResponse.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.penumbra.tools.summoning.v1alpha1.ParticipateResponse} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.penumbra.tools.summoning.v1alpha1.ParticipateResponse.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getPosition();
  if (f != null) {
    writer.writeMessage(
      1,
      f,
      proto.penumbra.tools.summoning.v1alpha1.ParticipateResponse.Position.serializeBinaryToWriter
    );
  }
  f = message.getContributeNow();
  if (f != null) {
    writer.writeMessage(
      2,
      f,
      proto.penumbra.tools.summoning.v1alpha1.ParticipateResponse.ContributeNow.serializeBinaryToWriter
    );
  }
  f = message.getConfirm();
  if (f != null) {
    writer.writeMessage(
      3,
      f,
      proto.penumbra.tools.summoning.v1alpha1.ParticipateResponse.Confirm.serializeBinaryToWriter
    );
  }
};





if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.penumbra.tools.summoning.v1alpha1.ParticipateResponse.Position.prototype.toObject = function(opt_includeInstance) {
  return proto.penumbra.tools.summoning.v1alpha1.ParticipateResponse.Position.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.penumbra.tools.summoning.v1alpha1.ParticipateResponse.Position} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.penumbra.tools.summoning.v1alpha1.ParticipateResponse.Position.toObject = function(includeInstance, msg) {
  var f, obj = {
    position: jspb.Message.getFieldWithDefault(msg, 1, 0),
    connectedParticipants: jspb.Message.getFieldWithDefault(msg, 2, 0),
    lastSlotBid: (f = msg.getLastSlotBid()) && penumbra_core_num_v1alpha1_num_pb.Amount.toObject(includeInstance, f),
    yourBid: (f = msg.getYourBid()) && penumbra_core_num_v1alpha1_num_pb.Amount.toObject(includeInstance, f)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.penumbra.tools.summoning.v1alpha1.ParticipateResponse.Position}
 */
proto.penumbra.tools.summoning.v1alpha1.ParticipateResponse.Position.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.penumbra.tools.summoning.v1alpha1.ParticipateResponse.Position;
  return proto.penumbra.tools.summoning.v1alpha1.ParticipateResponse.Position.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.penumbra.tools.summoning.v1alpha1.ParticipateResponse.Position} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.penumbra.tools.summoning.v1alpha1.ParticipateResponse.Position}
 */
proto.penumbra.tools.summoning.v1alpha1.ParticipateResponse.Position.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {number} */ (reader.readUint32());
      msg.setPosition(value);
      break;
    case 2:
      var value = /** @type {number} */ (reader.readUint32());
      msg.setConnectedParticipants(value);
      break;
    case 3:
      var value = new penumbra_core_num_v1alpha1_num_pb.Amount;
      reader.readMessage(value,penumbra_core_num_v1alpha1_num_pb.Amount.deserializeBinaryFromReader);
      msg.setLastSlotBid(value);
      break;
    case 4:
      var value = new penumbra_core_num_v1alpha1_num_pb.Amount;
      reader.readMessage(value,penumbra_core_num_v1alpha1_num_pb.Amount.deserializeBinaryFromReader);
      msg.setYourBid(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.penumbra.tools.summoning.v1alpha1.ParticipateResponse.Position.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.penumbra.tools.summoning.v1alpha1.ParticipateResponse.Position.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.penumbra.tools.summoning.v1alpha1.ParticipateResponse.Position} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.penumbra.tools.summoning.v1alpha1.ParticipateResponse.Position.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getPosition();
  if (f !== 0) {
    writer.writeUint32(
      1,
      f
    );
  }
  f = message.getConnectedParticipants();
  if (f !== 0) {
    writer.writeUint32(
      2,
      f
    );
  }
  f = message.getLastSlotBid();
  if (f != null) {
    writer.writeMessage(
      3,
      f,
      penumbra_core_num_v1alpha1_num_pb.Amount.serializeBinaryToWriter
    );
  }
  f = message.getYourBid();
  if (f != null) {
    writer.writeMessage(
      4,
      f,
      penumbra_core_num_v1alpha1_num_pb.Amount.serializeBinaryToWriter
    );
  }
};


/**
 * optional uint32 position = 1;
 * @return {number}
 */
proto.penumbra.tools.summoning.v1alpha1.ParticipateResponse.Position.prototype.getPosition = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 1, 0));
};


/**
 * @param {number} value
 * @return {!proto.penumbra.tools.summoning.v1alpha1.ParticipateResponse.Position} returns this
 */
proto.penumbra.tools.summoning.v1alpha1.ParticipateResponse.Position.prototype.setPosition = function(value) {
  return jspb.Message.setProto3IntField(this, 1, value);
};


/**
 * optional uint32 connected_participants = 2;
 * @return {number}
 */
proto.penumbra.tools.summoning.v1alpha1.ParticipateResponse.Position.prototype.getConnectedParticipants = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 2, 0));
};


/**
 * @param {number} value
 * @return {!proto.penumbra.tools.summoning.v1alpha1.ParticipateResponse.Position} returns this
 */
proto.penumbra.tools.summoning.v1alpha1.ParticipateResponse.Position.prototype.setConnectedParticipants = function(value) {
  return jspb.Message.setProto3IntField(this, 2, value);
};


/**
 * optional penumbra.core.num.v1alpha1.Amount last_slot_bid = 3;
 * @return {?proto.penumbra.core.num.v1alpha1.Amount}
 */
proto.penumbra.tools.summoning.v1alpha1.ParticipateResponse.Position.prototype.getLastSlotBid = function() {
  return /** @type{?proto.penumbra.core.num.v1alpha1.Amount} */ (
    jspb.Message.getWrapperField(this, penumbra_core_num_v1alpha1_num_pb.Amount, 3));
};


/**
 * @param {?proto.penumbra.core.num.v1alpha1.Amount|undefined} value
 * @return {!proto.penumbra.tools.summoning.v1alpha1.ParticipateResponse.Position} returns this
*/
proto.penumbra.tools.summoning.v1alpha1.ParticipateResponse.Position.prototype.setLastSlotBid = function(value) {
  return jspb.Message.setWrapperField(this, 3, value);
};


/**
 * Clears the message field making it undefined.
 * @return {!proto.penumbra.tools.summoning.v1alpha1.ParticipateResponse.Position} returns this
 */
proto.penumbra.tools.summoning.v1alpha1.ParticipateResponse.Position.prototype.clearLastSlotBid = function() {
  return this.setLastSlotBid(undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.penumbra.tools.summoning.v1alpha1.ParticipateResponse.Position.prototype.hasLastSlotBid = function() {
  return jspb.Message.getField(this, 3) != null;
};


/**
 * optional penumbra.core.num.v1alpha1.Amount your_bid = 4;
 * @return {?proto.penumbra.core.num.v1alpha1.Amount}
 */
proto.penumbra.tools.summoning.v1alpha1.ParticipateResponse.Position.prototype.getYourBid = function() {
  return /** @type{?proto.penumbra.core.num.v1alpha1.Amount} */ (
    jspb.Message.getWrapperField(this, penumbra_core_num_v1alpha1_num_pb.Amount, 4));
};


/**
 * @param {?proto.penumbra.core.num.v1alpha1.Amount|undefined} value
 * @return {!proto.penumbra.tools.summoning.v1alpha1.ParticipateResponse.Position} returns this
*/
proto.penumbra.tools.summoning.v1alpha1.ParticipateResponse.Position.prototype.setYourBid = function(value) {
  return jspb.Message.setWrapperField(this, 4, value);
};


/**
 * Clears the message field making it undefined.
 * @return {!proto.penumbra.tools.summoning.v1alpha1.ParticipateResponse.Position} returns this
 */
proto.penumbra.tools.summoning.v1alpha1.ParticipateResponse.Position.prototype.clearYourBid = function() {
  return this.setYourBid(undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.penumbra.tools.summoning.v1alpha1.ParticipateResponse.Position.prototype.hasYourBid = function() {
  return jspb.Message.getField(this, 4) != null;
};





if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.penumbra.tools.summoning.v1alpha1.ParticipateResponse.ContributeNow.prototype.toObject = function(opt_includeInstance) {
  return proto.penumbra.tools.summoning.v1alpha1.ParticipateResponse.ContributeNow.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.penumbra.tools.summoning.v1alpha1.ParticipateResponse.ContributeNow} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.penumbra.tools.summoning.v1alpha1.ParticipateResponse.ContributeNow.toObject = function(includeInstance, msg) {
  var f, obj = {
    parent: (f = msg.getParent()) && proto.penumbra.tools.summoning.v1alpha1.CeremonyCrs.toObject(includeInstance, f)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.penumbra.tools.summoning.v1alpha1.ParticipateResponse.ContributeNow}
 */
proto.penumbra.tools.summoning.v1alpha1.ParticipateResponse.ContributeNow.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.penumbra.tools.summoning.v1alpha1.ParticipateResponse.ContributeNow;
  return proto.penumbra.tools.summoning.v1alpha1.ParticipateResponse.ContributeNow.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.penumbra.tools.summoning.v1alpha1.ParticipateResponse.ContributeNow} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.penumbra.tools.summoning.v1alpha1.ParticipateResponse.ContributeNow}
 */
proto.penumbra.tools.summoning.v1alpha1.ParticipateResponse.ContributeNow.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = new proto.penumbra.tools.summoning.v1alpha1.CeremonyCrs;
      reader.readMessage(value,proto.penumbra.tools.summoning.v1alpha1.CeremonyCrs.deserializeBinaryFromReader);
      msg.setParent(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.penumbra.tools.summoning.v1alpha1.ParticipateResponse.ContributeNow.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.penumbra.tools.summoning.v1alpha1.ParticipateResponse.ContributeNow.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.penumbra.tools.summoning.v1alpha1.ParticipateResponse.ContributeNow} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.penumbra.tools.summoning.v1alpha1.ParticipateResponse.ContributeNow.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getParent();
  if (f != null) {
    writer.writeMessage(
      1,
      f,
      proto.penumbra.tools.summoning.v1alpha1.CeremonyCrs.serializeBinaryToWriter
    );
  }
};


/**
 * optional CeremonyCrs parent = 1;
 * @return {?proto.penumbra.tools.summoning.v1alpha1.CeremonyCrs}
 */
proto.penumbra.tools.summoning.v1alpha1.ParticipateResponse.ContributeNow.prototype.getParent = function() {
  return /** @type{?proto.penumbra.tools.summoning.v1alpha1.CeremonyCrs} */ (
    jspb.Message.getWrapperField(this, proto.penumbra.tools.summoning.v1alpha1.CeremonyCrs, 1));
};


/**
 * @param {?proto.penumbra.tools.summoning.v1alpha1.CeremonyCrs|undefined} value
 * @return {!proto.penumbra.tools.summoning.v1alpha1.ParticipateResponse.ContributeNow} returns this
*/
proto.penumbra.tools.summoning.v1alpha1.ParticipateResponse.ContributeNow.prototype.setParent = function(value) {
  return jspb.Message.setWrapperField(this, 1, value);
};


/**
 * Clears the message field making it undefined.
 * @return {!proto.penumbra.tools.summoning.v1alpha1.ParticipateResponse.ContributeNow} returns this
 */
proto.penumbra.tools.summoning.v1alpha1.ParticipateResponse.ContributeNow.prototype.clearParent = function() {
  return this.setParent(undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.penumbra.tools.summoning.v1alpha1.ParticipateResponse.ContributeNow.prototype.hasParent = function() {
  return jspb.Message.getField(this, 1) != null;
};





if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.penumbra.tools.summoning.v1alpha1.ParticipateResponse.Confirm.prototype.toObject = function(opt_includeInstance) {
  return proto.penumbra.tools.summoning.v1alpha1.ParticipateResponse.Confirm.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.penumbra.tools.summoning.v1alpha1.ParticipateResponse.Confirm} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.penumbra.tools.summoning.v1alpha1.ParticipateResponse.Confirm.toObject = function(includeInstance, msg) {
  var f, obj = {
    slot: jspb.Message.getFieldWithDefault(msg, 1, 0)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.penumbra.tools.summoning.v1alpha1.ParticipateResponse.Confirm}
 */
proto.penumbra.tools.summoning.v1alpha1.ParticipateResponse.Confirm.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.penumbra.tools.summoning.v1alpha1.ParticipateResponse.Confirm;
  return proto.penumbra.tools.summoning.v1alpha1.ParticipateResponse.Confirm.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.penumbra.tools.summoning.v1alpha1.ParticipateResponse.Confirm} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.penumbra.tools.summoning.v1alpha1.ParticipateResponse.Confirm}
 */
proto.penumbra.tools.summoning.v1alpha1.ParticipateResponse.Confirm.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {number} */ (reader.readUint64());
      msg.setSlot(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.penumbra.tools.summoning.v1alpha1.ParticipateResponse.Confirm.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.penumbra.tools.summoning.v1alpha1.ParticipateResponse.Confirm.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.penumbra.tools.summoning.v1alpha1.ParticipateResponse.Confirm} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.penumbra.tools.summoning.v1alpha1.ParticipateResponse.Confirm.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getSlot();
  if (f !== 0) {
    writer.writeUint64(
      1,
      f
    );
  }
};


/**
 * optional uint64 slot = 1;
 * @return {number}
 */
proto.penumbra.tools.summoning.v1alpha1.ParticipateResponse.Confirm.prototype.getSlot = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 1, 0));
};


/**
 * @param {number} value
 * @return {!proto.penumbra.tools.summoning.v1alpha1.ParticipateResponse.Confirm} returns this
 */
proto.penumbra.tools.summoning.v1alpha1.ParticipateResponse.Confirm.prototype.setSlot = function(value) {
  return jspb.Message.setProto3IntField(this, 1, value);
};


/**
 * optional Position position = 1;
 * @return {?proto.penumbra.tools.summoning.v1alpha1.ParticipateResponse.Position}
 */
proto.penumbra.tools.summoning.v1alpha1.ParticipateResponse.prototype.getPosition = function() {
  return /** @type{?proto.penumbra.tools.summoning.v1alpha1.ParticipateResponse.Position} */ (
    jspb.Message.getWrapperField(this, proto.penumbra.tools.summoning.v1alpha1.ParticipateResponse.Position, 1));
};


/**
 * @param {?proto.penumbra.tools.summoning.v1alpha1.ParticipateResponse.Position|undefined} value
 * @return {!proto.penumbra.tools.summoning.v1alpha1.ParticipateResponse} returns this
*/
proto.penumbra.tools.summoning.v1alpha1.ParticipateResponse.prototype.setPosition = function(value) {
  return jspb.Message.setOneofWrapperField(this, 1, proto.penumbra.tools.summoning.v1alpha1.ParticipateResponse.oneofGroups_[0], value);
};


/**
 * Clears the message field making it undefined.
 * @return {!proto.penumbra.tools.summoning.v1alpha1.ParticipateResponse} returns this
 */
proto.penumbra.tools.summoning.v1alpha1.ParticipateResponse.prototype.clearPosition = function() {
  return this.setPosition(undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.penumbra.tools.summoning.v1alpha1.ParticipateResponse.prototype.hasPosition = function() {
  return jspb.Message.getField(this, 1) != null;
};


/**
 * optional ContributeNow contribute_now = 2;
 * @return {?proto.penumbra.tools.summoning.v1alpha1.ParticipateResponse.ContributeNow}
 */
proto.penumbra.tools.summoning.v1alpha1.ParticipateResponse.prototype.getContributeNow = function() {
  return /** @type{?proto.penumbra.tools.summoning.v1alpha1.ParticipateResponse.ContributeNow} */ (
    jspb.Message.getWrapperField(this, proto.penumbra.tools.summoning.v1alpha1.ParticipateResponse.ContributeNow, 2));
};


/**
 * @param {?proto.penumbra.tools.summoning.v1alpha1.ParticipateResponse.ContributeNow|undefined} value
 * @return {!proto.penumbra.tools.summoning.v1alpha1.ParticipateResponse} returns this
*/
proto.penumbra.tools.summoning.v1alpha1.ParticipateResponse.prototype.setContributeNow = function(value) {
  return jspb.Message.setOneofWrapperField(this, 2, proto.penumbra.tools.summoning.v1alpha1.ParticipateResponse.oneofGroups_[0], value);
};


/**
 * Clears the message field making it undefined.
 * @return {!proto.penumbra.tools.summoning.v1alpha1.ParticipateResponse} returns this
 */
proto.penumbra.tools.summoning.v1alpha1.ParticipateResponse.prototype.clearContributeNow = function() {
  return this.setContributeNow(undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.penumbra.tools.summoning.v1alpha1.ParticipateResponse.prototype.hasContributeNow = function() {
  return jspb.Message.getField(this, 2) != null;
};


/**
 * optional Confirm confirm = 3;
 * @return {?proto.penumbra.tools.summoning.v1alpha1.ParticipateResponse.Confirm}
 */
proto.penumbra.tools.summoning.v1alpha1.ParticipateResponse.prototype.getConfirm = function() {
  return /** @type{?proto.penumbra.tools.summoning.v1alpha1.ParticipateResponse.Confirm} */ (
    jspb.Message.getWrapperField(this, proto.penumbra.tools.summoning.v1alpha1.ParticipateResponse.Confirm, 3));
};


/**
 * @param {?proto.penumbra.tools.summoning.v1alpha1.ParticipateResponse.Confirm|undefined} value
 * @return {!proto.penumbra.tools.summoning.v1alpha1.ParticipateResponse} returns this
*/
proto.penumbra.tools.summoning.v1alpha1.ParticipateResponse.prototype.setConfirm = function(value) {
  return jspb.Message.setOneofWrapperField(this, 3, proto.penumbra.tools.summoning.v1alpha1.ParticipateResponse.oneofGroups_[0], value);
};


/**
 * Clears the message field making it undefined.
 * @return {!proto.penumbra.tools.summoning.v1alpha1.ParticipateResponse} returns this
 */
proto.penumbra.tools.summoning.v1alpha1.ParticipateResponse.prototype.clearConfirm = function() {
  return this.setConfirm(undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.penumbra.tools.summoning.v1alpha1.ParticipateResponse.prototype.hasConfirm = function() {
  return jspb.Message.getField(this, 3) != null;
};


goog.object.extend(exports, proto.penumbra.tools.summoning.v1alpha1);
